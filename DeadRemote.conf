name: DeadRemote v3.1.1

slots:
    core:
        class: CoreUnit
    db:
        class: DataBank
        select: manual
    antigrav:
        class: AntiGravityGeneratorUnit
    warpdrive:
        class: WarpDriveUnit
    atmofueltank:
        class: AtmoFuelContainer
        select: all
    spacefueltank:
        class: SpaceFuelContainer
        select: all
    rocketfueltank:
        class: RocketFuelContainer
        select: all
    gyro:
        class: GyroUnit
    radar:
        class: RadarPVPUnit
        select: manual
    shield:
        class: ShieldGeneratorUnit
        select: manual

handlers:
  unit:
    onStart:
      lua: |
        -- Add Valid User ID --
        masterPlayerID = player.getId()
        pilotName = system.getPlayerName(masterPlayerID)
        validPilotCode = '123456' --Your player ID
        ----------------------
        
        ------- Predifined Engine Tags -------
        predefinedTags = {}
        table.insert(predefinedTags,'military')
        table.insert(predefinedTags,'maneuver')
        table.insert(predefinedTags,'freight')
        --------------------------------------
        
        showAlerts = false
        
        ---------------------------------------
        hudVersion = 'v3.1.0'
        minimalWidgets = false --export
        validatePilot = false --export
        useDB = true --export
        showRemotePanel = false --export
        showDockingPanel = false --export
        showFuelPanel = false --export
        showHelper = false --export
        showShieldWidget = false --export
        defaultHoverHeight = 42 --export
        defautlFollowDistance = 40 --export
        followMaxSpeedGain = 4000 --export
        topHUDLineColorSZ = 'rgba(125, 150, 160, 1)' --export
        topHUDFillColorSZ = 'rgba(20, 114, 209, 0.75)' --export
        textColorSZ = 'rgba(200, 225, 235, 1)' --export
        topHUDLineColorPVP = 'lightgrey' --export
        topHUDFillColorPVP = 'rgba(255, 0, 0, 0.75)' --export
        textColorPVP = 'black' --export
        fuelTextColor = 'rgba(200, 225, 235, 1)' --export
        neutralFontColor = 'white' --export
        neutralLineColor = 'lightgrey' --export
        Indicator_Width = 1.5
        Direction_Indicator_Size = 5 --export
        Direction_Indicator_Color = 'rgba(200, 225, 235, 1)' --export
        Prograde_Indicator_Size = 7.5 --export
        Prograde_Indicator_Color = 'rgb(60, 255, 60)' --export
        AP_Brake_Buffer = 5000 --export
        AP_Max_Rotation_Factor = 20 --export
        AR_Mode = 'NONE' --export
        AR_Range = 3 --export
        AR_Size = 15 --export
        AR_Fill = 'rgb(29, 63, 255)' --export
        AR_Outline = 'rgba(125, 150, 160, 1)' --export
        AR_Opacity = '0.5' --export
        AR_Exclude_Moons = true --export
        EngineTagColor = 'rgb(60, 255, 60)' --export
        initialResistWait = 15
        autoVent = true
        warning_size = 0.75 --export How large the warning indicators should be.
        warning_outline_color = 'rgb(255, 60, 60)' --export
        warning_fill_color = 'rgba(50, 50, 50, 0.9)' --export
        useLogo = false --export Enable the logo to be shown on the HUD. Must use the logo variable in unit.onStart and logo must be in SVG format.
        logoSVG = '<svg viewBox="100 0 200 500" width="400" height="500"> 	  <polygon style="paint-order: fill; stroke: rgb(191, 166, 95); stroke-width: 1.5px; stroke-linecap: round; stroke-miterlimit: 1; fill: rgb(14, 3, 27); stroke-linejoin: round;" points="0 135.706 61.665 51.467 224.57 51.299 287 135.581 143.921 492.818"/> 	  <polygon style="stroke-width: 0.5px; fill: rgb(191, 166, 95); stroke: rgb(191, 166, 95); stroke-linecap: round; stroke-linejoin: round;" points="19.464 141.252 92.171 169.799 89.762 190.81 118.569 237.883 81.34 295.081"/> 	  <polygon style="stroke-width: 0.5px; fill: rgb(191, 166, 95); stroke: rgb(191, 166, 95); stroke-linecap: round; stroke-linejoin: round;" points="94.088 166.745 18.487 137.186 71.808 64.673 140.04 139.503"/> 	  <polygon style="stroke-width: 0.5px; fill: rgb(191, 166, 95); stroke: rgb(191, 166, 95); stroke-linecap: round; stroke-linejoin: round;" points="82.857 298.873 120.362 241.689 120.227 220.611 95.445 193.609 125.12 219.307 125.142 252.811 143.672 276.36 161.82 252.425 161.851 218.589 191.413 194.022 166.914 220.994 166.575 240.41 204.615 298.826 144.742 448.602 144.861 284.752 178.001 269.382 165.761 255.903 143.642 282.037 121.43 255.717 107.87 269.269 141.945 284.668 142.287 448.443"/> 	  <polygon style="stroke-width: 0.5px; fill: rgb(191, 166, 95); stroke: rgb(191, 166, 95); stroke-linecap: round; stroke-linejoin: round;" points="221.951 64.868 146.688 94.764 200.119 166.941 268.131 92.223" transform="matrix(-1, 0, 0, -1, 414.819031, 231.80899)"/> 	  <polygon style="stroke-width: 0.5px; fill: rgb(191, 166, 95); stroke: rgb(191, 166, 95); stroke-linecap: round; stroke-linejoin: round;" points="142.453 64.685 75.919 137.818 210.604 137.697 144.206 64.724" transform="matrix(-1, 0, 0, -1, 286.52298, 202.502991)"/> 	  <polygon style="stroke-width: 0.5px; fill: rgb(191, 166, 95); stroke: rgb(191, 166, 95); stroke-linecap: round; stroke-linejoin: round;" points="168.836 294.998 241.703 266.291 239.538 244.634 268.022 197.642 231.035 140.523" transform="matrix(-1, 0, 0, -1, 436.858002, 435.520996)"/> 	  <path d="M 84.617 39.914 Q 75.887 47.433 68.7 47.433 Q 62.834 47.433 58.166 42.958 Q 53.498 38.482 53.498 30.634 Q 53.498 25.154 55.921 20.83 Q 58.345 16.506 62.792 13.56 Q 67.24 10.613 73.491 10.613 Q 78.944 10.613 83.791 12.32 L 83.791 20.637 L 81.836 20.637 Q 81.478 16.727 78.393 14.537 Q 75.309 12.348 71.04 12.348 Q 65.064 12.348 61.65 16.727 Q 58.235 21.105 58.235 27.467 Q 58.235 34.352 62.118 38.896 Q 66.001 43.439 72.087 43.439 Q 78.173 43.439 84.617 38.235 Z M 101.097 20.692 Q 106.302 20.692 109.427 23.956 Q 112.553 27.219 112.553 32.644 Q 112.553 39.088 108.202 43.26 Q 103.851 47.433 98.618 47.433 Q 93.386 47.433 90.357 44.114 Q 87.327 40.796 87.327 35.481 Q 87.327 29.147 91.637 24.919 Q 95.947 20.692 101.097 20.692 Z M 98.756 22.84 Q 95.011 22.84 93.028 25.512 Q 91.045 28.183 91.045 32.204 Q 91.045 37.161 94.171 41.057 Q 97.296 44.954 101.455 44.954 Q 104.539 44.954 106.673 42.393 Q 108.808 39.832 108.808 35.701 Q 108.808 31.873 107.1 28.83 Q 105.393 25.787 103.19 24.314 Q 100.987 22.84 98.756 22.84 Z M 115.294 23.584 L 122.537 20.637 L 123.748 20.637 L 123.748 29.587 Q 126.585 24.74 128.816 22.716 Q 131.046 20.692 133.387 20.692 Q 134.296 20.692 135.563 21.105 L 135.563 29.587 L 133.607 29.587 Q 133.58 24.603 130.716 24.603 Q 127.879 24.603 125.662 29.243 Q 123.445 33.883 123.445 39.749 Q 123.445 43.219 124.726 44.266 Q 126.007 45.312 129.614 45.312 L 129.614 46.634 L 115.294 46.634 L 115.294 45.312 Q 117.552 45.257 118.543 44.334 Q 119.535 43.412 119.535 41.016 L 119.535 26.723 Q 119.535 24.3 117.745 24.3 Q 117.001 24.3 115.294 24.906 Z M 138.075 23.584 L 145.318 20.637 L 146.53 20.637 L 146.53 29.587 Q 149.366 24.74 151.597 22.716 Q 153.827 20.692 156.168 20.692 Q 157.077 20.692 158.344 21.105 L 158.344 29.587 L 156.389 29.587 Q 156.361 24.603 153.497 24.603 Q 150.66 24.603 148.444 29.243 Q 146.227 33.883 146.227 39.749 Q 146.227 43.219 147.507 44.266 Q 148.788 45.312 152.395 45.312 L 152.395 46.634 L 138.075 46.634 L 138.075 45.312 Q 140.333 45.257 141.325 44.334 Q 142.316 43.412 142.316 41.016 L 142.316 26.723 Q 142.316 24.3 140.526 24.3 Q 139.783 24.3 138.075 24.906 Z M 167.328 9.181 Q 168.512 9.181 169.27 9.966 Q 170.027 10.751 170.027 11.825 Q 170.027 12.899 169.256 13.67 Q 168.485 14.441 167.383 14.441 Q 166.309 14.441 165.538 13.684 Q 164.767 12.926 164.767 11.825 Q 164.767 10.668 165.566 9.924 Q 166.364 9.181 167.328 9.181 Z M 161.077 45.312 Q 163.197 45.257 164.244 44.39 Q 165.29 43.522 165.29 41.016 L 165.29 25.952 Q 165.29 24.217 163.307 24.217 Q 162.591 24.217 161.738 24.575 Q 161.297 24.768 161.077 24.823 L 161.077 23.419 L 168.127 20.637 L 169.476 20.637 L 169.476 41.016 Q 169.476 43.467 170.495 44.362 Q 171.514 45.257 173.69 45.312 L 173.69 46.634 L 161.077 46.634 Z M 176.259 23.529 L 183.419 20.61 L 184.576 20.61 L 184.576 29.67 Q 188.541 24.382 191.102 22.496 Q 193.664 20.61 195.949 20.61 Q 200.603 20.61 200.603 26.586 L 200.603 41.016 Q 200.603 43.467 201.609 44.362 Q 202.614 45.257 204.817 45.312 L 204.817 46.634 L 195.233 46.634 L 195.233 45.312 Q 196.39 45.257 196.39 43.963 L 196.39 26.944 Q 196.39 25.512 195.646 24.644 Q 194.903 23.777 193.719 23.777 Q 190.249 23.777 187.261 28.692 Q 184.273 33.608 184.273 39.97 Q 184.273 43.192 185.264 44.224 Q 186.256 45.257 188.789 45.312 L 188.789 46.634 L 176.259 46.634 L 176.259 45.312 Q 178.49 45.257 179.467 44.348 Q 180.445 43.439 180.445 41.016 L 180.445 26.944 Q 180.445 24.217 178.627 24.217 Q 177.966 24.217 176.259 24.906 Z M 221.003 20.692 Q 226.208 20.692 229.334 23.956 Q 232.459 27.219 232.459 32.644 Q 232.459 39.088 228.108 43.26 Q 223.757 47.433 218.525 47.433 Q 213.292 47.433 210.263 44.114 Q 207.234 40.796 207.234 35.481 Q 207.234 29.147 211.543 24.919 Q 215.853 20.692 221.003 20.692 Z M 218.662 22.84 Q 214.917 22.84 212.934 25.512 Q 210.951 28.183 210.951 32.204 Q 210.951 37.161 214.077 41.057 Q 217.203 44.954 221.361 44.954 Q 224.445 44.954 226.58 42.393 Q 228.714 39.832 228.714 35.701 Q 228.714 31.873 227.007 28.83 Q 225.299 25.787 223.096 24.314 Q 220.893 22.84 218.662 22.84 Z" style="fill: rgb(14, 3, 27); white-space: pre;"/> 	</svg>' --export SVG Logo that will be placed in the top left of the HUD (automatically scaled)
        
        -- Ship information Widget --
        shipInfoWidgetX = 76.5
        shipInfoWidgetY = -0.9
        shipInfoWidgetScale = 10
        
        
        ------------------------------------
        
        userCode = {}
        userCode[validPilotCode] = pilotName
        if db_1 ~= nil and useDB then
            globalDB('get')
        end
        
        followID = nil
        AR_Custom_Points = {}
        AR_Custom = false
        AR_Temp = false
        AR_Temp_Points = {}
        if pcall(require,'autoconf/custom/AR_Waypoints') then 
            waypoints = require('autoconf/custom/AR_Waypoints') 
            for name,pos in pairs(waypoints) do
                AR_Custom_Points[name] = pos
                AR_Custom = true
            end
        end
        screenHeight = system.getScreenHeight()
        screenWidth = system.getScreenWidth()
        maxFuel = 0
        for i,v in pairs(spacefueltank) do maxFuel = maxFuel + v.getMaxVolume() end
        currentSystem = Atlas[0]
        planets = {}
        constructPosition = vec3(construct.getWorldPosition())
        warp_beacons = {}
        if pcall(require,'autoconf/custom/beacons') then 
            beacons = require('autoconf/custom/beacons') 
            for name,pos in pairs(beacons) do
                warp_beacons[name] = convertWaypoint(pos)
            end
        end
        for k,v in pairs(currentSystem) do 
            warp_beacons[currentSystem[k]['name'][1]] = vec3(currentSystem[k]['center']) 
            planets[currentSystem[k]['name'][1]] = vec3(currentSystem[k]['center']) 
        end
        pipes = {}
        SZ = vec3(13771471, 7435803, -128971)
        inSZ = true
        enabledEngineTags = {}
        ------------------------------------
        
        pitchInput = 0
        rollInput = 0
        yawInput = 0
        brakeInput = 0
        
        Nav = Navigator.new(system, core, unit)
        Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal, {1000, 5000, 10000, 20000, 30000})
        Nav.axisCommandManager:setTargetGroundAltitude(0)
        
        -- Parenting widget
        if showDockingPanel then
            parentingPanelId = system.createWidgetPanel("Docking")
            parentingWidgetId = system.createWidget(parentingPanelId,"parenting")
            system.addDataToWidget(unit.getDataId(),parentingWidgetId)
        end
        
        
        -- element widgets
        -- For now we have to alternate between PVP and non-PVP widgets to have them on the same side.
        if not showRemotePanel then
            unit.hideWidget()
            core.hideWidget()
        else
            unit.showWidget()
            core.showWidget()
        end
        
        placeRadar = true
        if atmofueltank_size > 0 and showFuelPanel then
            _autoconf.displayCategoryPanel(atmofueltank, atmofueltank_size, "Atmo Fuel", "fuel_container")
            if placeRadar then
                _autoconf.displayCategoryPanel(radar, radar_size, "Radar", "radar")
                placeRadar = false
            end
        end
        if spacefueltank_size > 0 and showFuelPanel then
            _autoconf.displayCategoryPanel(spacefueltank, spacefueltank_size, "Space Fuel", "fuel_container")
            if placeRadar then
                _autoconf.displayCategoryPanel(radar, radar_size, "Radar", "radar")
                placeRadar = false
            end
        end
        _autoconf.displayCategoryPanel(rocketfueltank, rocketfueltank_size, "Rocket Fuel", "fuel_container")
        if placeRadar then -- We either have only rockets or no fuel tanks at all, uncommon for usual vessels
            _autoconf.displayCategoryPanel(radar, radar_size, "Radar", "radar")
            placeRadar = false
        end
        if antigrav ~= nil then antigrav.showWidget() end
        if warpdrive ~= nil then warpdrive.showWidget() end
        if gyro ~= nil then gyro.showWidget() end
        if shield_1 ~= nil and showShieldWidget then shield_1.showWidget() end
        
        -- freeze the player in he is remote controlling the construct
        seated = player.isSeated()
        if seated == 1 then
            player.freeze(1)
        end
        
        if not showHelper then
            system.showHelper(0)
        end
        
        -- landing gear
        -- make sure every gears are synchonized with the first
        gearExtended = (Nav.control.isAnyLandingGearDeployed() == 1) -- make sure it's a lua boolean
        if gearExtended then
            Nav.control.deployLandingGears()
        else
            Nav.control.retractLandingGears()
        end
        
        if vec3(construct.getWorldVelocity()):len() * 3.6 < 500 then
            brakeInput = brakeInput + 1
        end
        
        lShift = false
        lAlt = false
        
        -- Validate pilot mode --
        if validatePilot then
            local validPilot = false
            for k,v in pairs(userCode) do 
                if k == tostring(player.getId()) then validPilot = true system.print(string.format('-- Welcome %s --',pilotName)) break end
            end
            if not validPilot then
                system.print(player.getId())
                unit.exit()
            end
        end
        ----------------------------
        
        showScreen = true
        fuelWarningText = ''
        warnings = {}
        warningSymbols = {}
        warningSymbols['svgCritical'] = [[
                        <svg x="0px" y="0px" viewBox="0 0 414.205 414.205" style="enable-background:new 0 0 414.205 414.205;">
                            <g>
                                <g>
                                    <polygon points="188.077,129.985 188.077,129.99 165.759,226.671 216.626,207.046 204.891,257.867 194.589,257.867 
                                        206.99,293.641 235.908,257.867 225.606,257.867 244.561,175.773 193.693,195.398 208.797,129.985 		"/>
                                    <path d="M39.11,207.103l167.992,167.992L375.09,207.103L207.103,39.116L39.11,207.103z M207.103,351.103l-143.995-144
                                        L207.103,63.108l143.99,143.995L207.103,351.103z"/>
                                    <path d="M405.093,185.102L229.103,9.112c-12.15-12.15-31.846-12.15-43.996,0L9.112,185.102c-12.15,12.15-12.15,31.846,0,43.996
                                        l175.99,175.995c12.15,12.15,31.846,12.15,43.996,0l175.995-175.99C417.243,216.954,417.243,197.252,405.093,185.102z
                                        M393.092,217.097l-175.985,176c-2.673,2.668-6.226,4.137-10.004,4.137s-7.327-1.469-9.999-4.137L21.108,217.102
                                        c-5.514-5.514-5.514-14.484,0-19.999L197.103,21.108c2.673-2.667,6.221-4.137,9.999-4.137s7.332,1.469,10.004,4.142l175.99,175.99
                                        c2.673,2.673,4.142,6.226,4.142,9.999S395.764,214.429,393.092,217.097z"/>
                                </g>
                            </g>
                        </svg>
                    ]]
        warningSymbols['svgWarning'] = [[
                        <svg x="0px" y="0px"
                            viewBox="0 0 192.146 192.146" style="enable-background:new 0 0 192.146 192.146;" >
                            <g>
                                <g>
                                    <g>
                                        <path d="M108.186,144.372c0,7.054-4.729,12.32-12.037,12.32h-0.254c-7.054,0-11.92-5.266-11.92-12.32
                                            c0-7.298,5.012-12.31,12.174-12.31C103.311,132.062,108.059,137.054,108.186,144.372z M88.44,125.301h15.447l2.951-61.298H85.46
                                            L88.44,125.301z M190.372,177.034c-2.237,3.664-6.214,5.921-10.493,5.921H12.282c-4.426,0-8.51-2.384-10.698-6.233
                                            c-2.159-3.849-2.11-8.549,0.147-12.349l84.111-149.22c2.208-3.722,6.204-5.96,10.522-5.96h0.332
                                            c4.445,0.107,8.441,2.618,10.513,6.546l83.515,149.229C192.717,168.768,192.629,173.331,190.372,177.034z M179.879,170.634
                                            L96.354,21.454L12.292,170.634H179.879z"/>
                                    </g>
                                </g>
                            </g>
                        </svg>
                    ]]
        warningSymbols['svgTarget'] = [[
                        <svg x="0px" y="0px" viewBox="0 0 330 330" style="enable-background:new 0 0 330 330;">
                            <g id="XMLID_813_">
                                <path id="XMLID_814_" d="M15,130c8.284,0,15-6.716,15-15V30h85c8.284,0,15-6.716,15-15s-6.716-15-15-15H15C6.716,0,0,6.716,0,15
                                    v100C0,123.284,6.716,130,15,130z"/>
                                <path id="XMLID_815_" d="M15,330h100c8.284,0,15-6.716,15-15s-6.716-15-15-15H30v-85c0-8.284-6.716-15-15-15s-15,6.716-15,15v100
                                    C0,323.284,6.716,330,15,330z"/>
                                <path id="XMLID_816_" d="M315,200c-8.284,0-15,6.716-15,15v85h-85c-8.284,0-15,6.716-15,15s6.716,15,15,15h100
                                    c8.284,0,15-6.716,15-15V215C330,206.716,323.284,200,315,200z"/>
                                <path id="XMLID_817_" d="M215,30h85v85c0,8.284,6.716,15,15,15s15-6.716,15-15V15c0-8.284-6.716-15-15-15H215
                                    c-8.284,0-15,6.716-15,15S206.716,30,215,30z"/>
                                <path id="XMLID_818_" d="M75,165c0,8.284,6.716,15,15,15h60v60c0,8.284,6.716,15,15,15s15-6.716,15-15v-60h60
                                    c8.284,0,15-6.716,15-15s-6.716-15-15-15h-60V90c0-8.284-6.716-15-15-15s-15,6.716-15,15v60H90C81.716,150,75,156.716,75,165z"/>
                            </g>
                        </svg>
                    ]]
        warningSymbols['svgGroup'] = [[
                        <svg x="0px" y="0px" viewBox="0 0 487.3 487.3" style="enable-background:new 0 0 487.3 487.3;" >
                            <g>
                                <g>
                                    <g>
                                        <path d="M362.1,326.05c-32.6-26.8-67.7-44.5-74.9-48c-0.8-0.4-1.3-1.2-1.3-2.1v-50.7c6.4-4.3,10.6-11.5,10.6-19.7v-52.6
                                            c0-26.2-21.2-47.4-47.4-47.4h-5.6h-5.7c-26.2,0-47.4,21.2-47.4,47.4v52.6c0,8.2,4.2,15.5,10.6,19.7v50.7c0,0.9-0.5,1.7-1.3,2.1
                                            c-7.2,3.5-42.3,21.3-74.9,48c-5.9,4.8-9.3,12.1-9.3,19.7v36h128h127.9v-36C371.4,338.15,368,330.85,362.1,326.05z"/>
                                    </g>
                                    <g>
                                        <path d="M479.2,290.55c-27.3-22.5-56.8-37.4-62.8-40.3c-0.7-0.3-1.1-1-1.1-1.8v-42.5c5.3-3.6,8.9-9.6,8.9-16.6v-44.1
                                            c0-21.9-17.8-39.7-39.7-39.7h-4.7h-4.7c-21.9,0-39.7,17.8-39.7,39.7v44.1c0,6.9,3.5,13,8.9,16.6v42.5c0,0.8-0.4,1.4-1.1,1.8
                                            c-3.7,1.8-16.5,8.2-32.1,18.2c15.6,8.6,40.3,23.4,63.6,42.6c8.2,6.7,13.6,16,15.6,26.2h97v-30.2
                                            C487,300.65,484.2,294.55,479.2,290.55z"/>
                                    </g>
                                    <g>
                                        <path d="M144,250.25c-0.7-0.3-1.1-1-1.1-1.8v-42.5c5.3-3.6,8.9-9.6,8.9-16.6v-44.1c0-21.9-17.8-39.7-39.7-39.7h-4.7h-4.9
                                            c-21.9,0-39.7,17.8-39.7,39.7v44.1c0,6.9,3.5,13,8.9,16.6v42.5c0,0.8-0.4,1.4-1.1,1.8c-6,2.9-35.5,17.8-62.8,40.3
                                            c-4.9,4.1-7.8,10.1-7.8,16.5v30.2h97c1.9-10.2,7.4-19.5,15.6-26.2c23.3-19.2,48-34,63.6-42.6
                                            C160.5,258.45,147.7,252.05,144,250.25z"/>
                                    </g>
                                </g>
                            </g>
                        </svg>
                    ]]
        warningSymbols['svgBrakes'] = [[
                        <svg x="0px" y="0px" viewBox="0 0 234.409 234.409" style="enable-background:new 0 0 234.409 234.409;">
                            <g>
                                <path d="M117.204,30.677c-47.711,0-86.527,38.816-86.527,86.528c0,47.711,38.816,86.526,86.527,86.526s86.527-38.815,86.527-86.526
                                    C203.732,69.494,164.915,30.677,117.204,30.677z M117.204,188.732c-39.44,0-71.527-32.086-71.527-71.526
                                    c0-39.441,32.087-71.528,71.527-71.528s71.527,32.087,71.527,71.528C188.732,156.645,156.645,188.732,117.204,188.732z"/>
                                <path d="M44.896,44.897c2.929-2.929,2.929-7.678,0-10.607c-2.93-2.929-7.678-2.929-10.607,0
                                    c-45.718,45.719-45.718,120.111,0,165.831c1.465,1.465,3.384,2.197,5.304,2.197c1.919,0,3.839-0.732,5.303-2.197
                                    c2.93-2.929,2.93-7.677,0.001-10.606C5.026,149.643,5.026,84.768,44.896,44.897z"/>
                                <path d="M200.119,34.29c-2.93-2.929-7.678-2.929-10.607,0c-2.929,2.929-2.929,7.678,0,10.607
                                    c39.872,39.871,39.872,104.746,0,144.618c-2.929,2.929-2.929,7.678,0,10.606c1.465,1.464,3.385,2.197,5.304,2.197
                                    c1.919,0,3.839-0.732,5.304-2.197C245.839,154.4,245.839,80.009,200.119,34.29z"/>
                                <path d="M117.204,140.207c4.143,0,7.5-3.358,7.5-7.5v-63.88c0-4.142-3.357-7.5-7.5-7.5c-4.143,0-7.5,3.358-7.5,7.5v63.88
                                    C109.704,136.849,113.062,140.207,117.204,140.207z"/>
                                <circle cx="117.204" cy="156.254" r="9.329"/>
                            </g>
                        </svg>
                    ]]
        
        system.showScreen(1)
    onStop:
      lua: |
        _autoconf.hideCategoryPanels()
        if antigrav ~= nil then antigrav.hideWidget() end
        if warpdrive ~= nil then warpdrive.hideWidget() end
        if gyro ~= nil then gyro.hideWidget() end
        core.hideWidget()
        Nav.control.switchOffHeadlights()
        globalDB('save')
  system:
    onStart:
      lua: |
        json = require("dkjson")
        Atlas = require('atlas')
        
        
        function convertWaypoint(wp)
            local clamp  = utils.clamp
            local deg2rad    = math.pi/180
            local rad2deg    = 180/math.pi
            local epsilon    = 1e-10
        
            local num        = ' *([+-]?%d+%.?%d*e?[+-]?%d*)'
            local posPattern = '::pos{' .. num .. ',' .. num .. ',' ..  num .. ',' .. num ..  ',' .. num .. '}'
            local systemId = wp 
        
            systemId, bodyId, latitude, longitude, altitude = string.match(wp, posPattern)
            assert(systemId, 'Position string is malformed.')
        
            systemId  = tonumber(systemId)
            bodyId    = tonumber(bodyId)
            latitude  = tonumber(latitude)
            longitude = tonumber(longitude)
            altitude  = tonumber(altitude)
        
            if bodyId == 0 then -- this is a hack to represent points in space
            mapPosition =  setmetatable({latitude  = latitude,
                                        longitude = longitude,
                                        altitude  = altitude,
                                        bodyId    = bodyId,
                                        systemId  = systemId}, MapPosition)
            else
            mapPosition = setmetatable({latitude  = deg2rad*clamp(latitude, -90, 90),
                                        longitude = deg2rad*(longitude % 360),
                                        altitude  = altitude,
                                        bodyId    = bodyId,
                                        systemId  = systemId}, MapPosition)
            end
            if mapPosition.bodyId == 0 then
                return vec3(mapPosition.latitude, mapPosition.longitude, mapPosition.altitude)
            end
        
            local center = {
                x=Atlas[systemId][bodyId].center[1],
                y=Atlas[systemId][bodyId].center[2],
                z=Atlas[systemId][bodyId].center[3]
            }
        
            local xproj = math.cos(mapPosition.latitude)
            return center + (Atlas[systemId][bodyId].radius + mapPosition.altitude) *
                vec3(xproj*math.cos(mapPosition.longitude),
                    xproj*math.sin(mapPosition.longitude),
                    math.sin(mapPosition.latitude))
        end
        
        function string.starts(String,Start)
           return string.sub(String,1,string.len(Start))==Start
        end
        
        function formatNumber(val, numType)
            if numType == 'speed' then
                local speedString = ''
                if type(val) == 'number' then speedString = string.format('%.0fkm/h',val)
                else speedString = string.format('%skm/h',val)
                end
                return speedString
            elseif numType == 'distance' then
                local distString = ''
                if type(val) == 'number' then
                    if val < 1000 then distString = string.format('%.2fm',val)
                    elseif val < 100000 then distString = string.format('%.2fkm',val/1000)
                    else distString = string.format('%.2fsu',val*.000005)
                    end
                else
                    distString = string.format('%sm',val)
                end
                return distString
            elseif numType == 'mass' then
                local massStr = ''
                if type(val) == 'number' then
                    if val < 1000 then massStr = string.format('%.2fkg',val)
                    elseif val < 1000000 then massStr = string.format('%.2ft',val/1000)
                    else massStr = string.format('%.2fkt',val/1000000)
                    end
                else
                    massStr = string.format('%skg',val)
                end
                return massStr
            end
        end
        
        function pipeDist(A,B,loc,reachable)
            local AB = vec3.new(B['x']-A['x'],B['y']-A['y'],B['z']-A['z'])
            local BE = vec3.new(loc['x']-B['x'],loc['y']-B['y'],loc['z']-B['z'])
            local AE = vec3.new(loc['x']-A['x'],loc['y']-A['y'],loc['z']-A['z'])
        
            -- Is the point within warp distance and do we care?
            if AB:len() <= 500/0.000005 or not reachable then
                AB_BE = AB:dot(BE)
                AB_AE = AB:dot(AE)
        
                -- Is the point past the warp destination?
                -- If so, then the warp destination is closest
                if (AB_BE > 0) then
                    dist = BE:len()
                    distType = 'POINT'
        
                -- Is the point before the start point?
                -- If so, then the start point is the closest
                elseif (AB_AE < 0) then
                    dist = AE:len()
                    distType = 'POINT'
        
                -- If neither above condition was met, then the
                -- destination point must have be directly out from
                -- somewhere along the warp pipe. Let's calculate
                -- that distance
                else
                    dist = vec3(AE:cross(BE)):len()/vec3(AB):len()
                    distType = 'PIPE'
                end
                return dist,distType
            end
            return nil,nil
        end
        
        function closestPlanet()
            local cName = nil
            local cDist = nil
            for pname,pvec in pairs(planets) do
                local tempDist = vec3(constructPosition-pvec):len()
                if cDist == nil or cDist > tempDist then
                    cDist = tempDist
                    cName = pname
                end
            end
            return cName,cDist
        end
        
        function closestPipe()
            pipes = {}
            for name,center in pairs(planets) do
                    pipes[string.format('%s - %s',closestPlanetName,name)] = {}
                    table.insert(pipes[string.format('%s - %s',closestPlanetName,name)],planets[closestPlanetName])
                    table.insert(pipes[string.format('%s - %s',closestPlanetName,name)],center)
            end
            local cPipe = 'None'
            local cDist = 9999999999
            local cLoc = vec3(construct.getWorldPosition())
            for pName,vecs in pairs(pipes) do
                local tempDist,tempType = pipeDist(vecs[1],vecs[2],cLoc,false)
                if tempDist ~= nil then
                    if cDist > tempDist then
                        cDist = tempDist
                        cPipe = pName
                    end
                end
            end
            return cPipe,cDist
        end
        
        function contains(tablelist, val)
            for i=1,#tablelist do
               if tablelist[i] == val then 
                  return true
               end
            end
            return false
         end
        
        
         function WeaponWidgetCreate()
            if type(weapon) == 'table' and #weapon > 0 then
                local WeaponPanaelIdList = {}
                for i = 1, #weapon do
                    if i%2 ~= 0 then
                    table.insert(WeaponPanaelIdList, system.createWidgetPanel(''))
                    end
                        local WeaponWidgetDataId = weapon[i].getDataId()
                        local WeaponWidgetType = weapon[i].getWidgetType()
                        system.addDataToWidget(WeaponWidgetDataId, system.createWidget(WeaponPanaelIdList[#WeaponPanaelIdList], WeaponWidgetType))
                end
            end
        end
        
        function brakeWidget()
            local brakeON = brakeInput > 0
            local bw = ''
            if brakeON then
                warnings['brakes'] = 'svgBrakes'
            else
                warnings['brakes'] = nil
            end
            return bw
        end
        
        function flightWidget()
            if Nav.axisCommandManager:getMasterMode() == controlMasterModeId.travel then mode = 'Throttle ' .. tostring(Nav.axisCommandManager:getThrottleCommand(0) * 100) .. '%' modeBG = bgColor
            else mode = 'Cruise '  .. string.format('%.2f',Nav.axisCommandManager:getTargetSpeed(0)) .. ' km/h' modeBG = 'rgba(99, 250, 79, 0.5)'
            end
            local sw = ''
            if speed ~= nil then
                --Center Top
                sw = [[
                    <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                        <path d="
                        M ]] .. tostring(.31*screenWidth) .. ' ' .. tostring(.001*screenHeight) ..[[ 
                        L ]] .. tostring(.69*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [[
                        L ]] .. tostring(.61*screenWidth) .. ' ' .. tostring(.055*screenHeight) .. [[
                        L ]] .. tostring(.39*screenWidth) .. ' ' .. tostring(.055*screenHeight) .. [[
                        L ]] .. tostring(.31*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [["
                        stroke="]]..lineColor..[[" stroke-width="2" fill="]]..bgColor..[[" />]]
                
        
                -- Right Side
                sw = sw .. [[<path d="
                        M ]] .. tostring(.6635*screenWidth) .. ' ' .. tostring(.028*screenHeight) .. [[ 
                        L ]] .. tostring(.691*screenWidth) .. ' ' .. tostring(.0387*screenHeight) .. [[
                        L ]] .. tostring(.80*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [[
                        L ]] .. tostring(.69*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [[
                        L ]] .. tostring(.6635*screenWidth) .. ' ' .. tostring(.0185*screenHeight) .. [[
                        L ]] .. tostring(.6635*screenWidth) .. ' ' .. tostring(.028*screenHeight) .. [["
                        stroke="]]..lineColor..[[" stroke-width="1" fill="]].. modeBG ..[[" />]]
                        
                sw = sw .. [[<path d="
                        M ]] .. tostring(.5*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [[ 
                        L ]] .. tostring(.5*screenWidth) .. ' ' .. tostring(.0645*screenHeight) .. [["
                        stroke="]]..lineColor..[[" stroke-width="1" fill="none" />
        
                        <path d="
                        M ]] .. tostring(.61*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [[ 
                        L ]] .. tostring(.61*screenWidth) .. ' ' .. tostring(.0645*screenHeight) .. [["
                        stroke="]]..lineColor..[[" stroke-width="1" fill="none" />
        
                        <path d="
                        M ]] .. tostring(.39*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [[ 
                        L ]] .. tostring(.39*screenWidth) .. ' ' .. tostring(.0645*screenHeight) .. [["
                        stroke="]]..lineColor..[[" stroke-width="1" fill="none" />
        
                        <text x="]].. tostring(.4 * screenWidth) ..[[" y="]].. tostring(.015 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold">Speed: ]] .. formatNumber(speed,'speed') .. [[</text>
                        <text x="]].. tostring(.4 * screenWidth) ..[[" y="]].. tostring(.0325 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold">Current Accel: ]] .. string.format('%.2f G',accel/9.81) .. [[</text>
                        <text x="]].. tostring(.4 * screenWidth) ..[[" y="]].. tostring(.05 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold">Brake Dist: ]] .. formatNumber(brakeDist,'distance') .. [[</text>
                        
                        <text x="]].. tostring(.502 * screenWidth) ..[[" y="]].. tostring(.015 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold">Max Speed: ]] .. formatNumber(maxSpeed,'speed') .. [[</text>
                        <text x="]].. tostring(.502 * screenWidth) ..[[" y="]].. tostring(.0325 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold">Max Accel: ]] .. string.format('%.2f G',maxSpaceThrust/mass/9.81) ..[[</text>
                        <text x="]].. tostring(.502 * screenWidth) ..[[" y="]].. tostring(.05 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold">Max Brake: ]] .. string.format('%.2f G',maxBrake/mass/9.81) .. [[</text>
        
                        <text x="]].. tostring(.37 * screenWidth) ..[[" y="]].. tostring(.015 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold">Mass </text>
                        <text x="]].. tostring(.355 * screenWidth) ..[[" y="]].. tostring(.028 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold">]]..formatNumber(mass,'mass')..[[</text>
        
                        <text x="]].. tostring(.612 * screenWidth) ..[[" y="]].. tostring(.015 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold">Gravity </text>
                        <text x="]].. tostring(.612 * screenWidth) ..[[" y="]].. tostring(.028 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold">]].. string.format('%.2f G',gravity/9.81) ..[[</text>
        
                        <text x="]].. tostring(.684 * screenWidth) ..[[" y="]].. tostring(.028 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold" transform="rotate(-10,]].. tostring(.684 * screenWidth) ..",".. tostring(.028 * screenHeight) ..[[)">]].. mode ..[[</text>
        
                        
        
                    </svg>
                    ]]
            else
                sw = ''
            end
            return sw
        end
        
        function fuelWidget()
            curFuel = 0
            local fuelWarning = false
            local fuelTankWarning = false
            for i,v in pairs(spacefueltank) do 
                curFuel = curFuel + v.getItemsVolume()
                if v.getItemsVolume()/v.getMaxVolume() < .2 then fuelTankWarning = true end
            end
            sFuelPercent = curFuel/maxFuel * 100
            if sFuelPercent < 20 then fuelWarning = true end
            curFuelStr = string.format('%.2f%%',sFuelPercent)
        
            --Center bottom ribbon
            local fw = string.format([[
                <svg width="100%%" height="100%%" style="position: absolute;left:0%%;top:0%%;font-family: Calibri;">
                    <linearGradient id="sFuel" x1="0%%" y1="0%%" x2="100%%" y2="0%%">
                    <stop offset="%.1f%%" style="stop-color:rgba(99, 250, 79, 0.95);stop-opacity:.95" />
                    <stop offset="%.1f%%" style="stop-color:rgba(255, 10, 10, 0.5);stop-opacity:.5" />
                    </linearGradient>]],sFuelPercent,sFuelPercent)
        
            fw = fw .. [[
                <path d="
                M ]] .. tostring(.336*screenWidth) .. ' ' .. tostring(.0185*screenHeight) .. [[ 
                L ]] .. tostring(.39*screenWidth) .. ' ' .. tostring(.055*screenHeight) .. [[
                L ]] .. tostring(.61*screenWidth) .. ' ' .. tostring(.055*screenHeight) .. [[
                L ]] .. tostring(.6635*screenWidth) .. ' ' .. tostring(.0185*screenHeight) .. [[
                L ]] .. tostring(.6635*screenWidth) .. ' ' .. tostring(.028*screenHeight) .. [[
                L ]] .. tostring(.61*screenWidth) .. ' ' .. tostring(.0645*screenHeight) .. [[
                L ]] .. tostring(.39*screenWidth) .. ' ' .. tostring(.0645*screenHeight) .. [[
                L ]] .. tostring(.3365*screenWidth) .. ' ' .. tostring(.028*screenHeight) .. [[
                L ]] .. tostring(.336*screenWidth) .. ' ' .. tostring(.0185*screenHeight) .. [["
            stroke="]]..lineColor..[[" stroke-width="2" fill="]]..bgColor..[[" />
        
            <path d="
                M ]] .. tostring(.39*screenWidth) .. ' ' .. tostring(.055*screenHeight) .. [[
                L ]] .. tostring(.61*screenWidth) .. ' ' .. tostring(.055*screenHeight) .. [[
                L ]] .. tostring(.61*screenWidth) .. ' ' .. tostring(.0645*screenHeight) .. [[
                L ]] .. tostring(.39*screenWidth) .. ' ' .. tostring(.0645*screenHeight) .. [[
                L ]] .. tostring(.39*screenWidth) .. ' ' .. tostring(.055*screenHeight) .. [["
            stroke="]]..lineColor..[[" stroke-width="1" fill="url(#sFuel)" />
        
            <path d="
                M ]] .. tostring(.5*screenWidth) .. ' ' .. tostring(.055*screenHeight) .. [[ 
                L ]] .. tostring(.5*screenWidth) .. ' ' .. tostring(.070*screenHeight) .. [["
            stroke="black" stroke-width="1.5" fill="none" />
        
            <path d="
                M ]] .. tostring(.555*screenWidth) .. ' ' .. tostring(.055*screenHeight) .. [[ 
                L ]] .. tostring(.555*screenWidth) .. ' ' .. tostring(.070*screenHeight) .. [["
            stroke="black" stroke-width="1.5" fill="none" />
        
            <path d="
                M ]] .. tostring(.445*screenWidth) .. ' ' .. tostring(.055*screenHeight) .. [[ 
                L ]] .. tostring(.445*screenWidth) .. ' ' .. tostring(.070*screenHeight) .. [["
            stroke="black" stroke-width="1.5" fill="none" />
        
            <text x="]].. tostring(.39 * screenWidth) ..[[" y="]].. tostring(.08 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">Fuel: ]] .. curFuelStr .. [[</text>
            <!--text x="]].. tostring(.445 * screenWidth) ..[[" y="]].. tostring(.08 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">25%</text>
            <text x="]].. tostring(.5 * screenWidth) ..[[" y="]].. tostring(.08 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">50%</text>
            <text x="]].. tostring(.555 * screenWidth) ..[[" y="]].. tostring(.08 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">75%</text-->
        
        
            ]]
        
            if fuelTankWarning or fuelWarning or showAlerts then
                fuelWarningText = 'Fuel level &lt; 20%'
                if not fuelWarning then fuelWarningText = 'A Fuel tank &lt; 20%%' end
                warnings['lowFuel'] = 'svgWarning'
            else
                warnings['lowFuel'] = nil
            end
        
            fw = fw .. '</svg>'
        
            return fw
        end
        
        function apStatusWidget()
            local bg = bgColor
            local apStatus = 'inactive'
            if auto_follow then bg = 'rgba(99, 250, 79, 0.5)' apStatus = 'following' end
            if autopilot then bg = 'rgba(99, 250, 79, 0.5)' apStatus = 'Engaged' end
            if not autopilot and autopilot_dest ~= nil then apStatus = 'Set' end
            local apw = [[
                    <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                    -- Left Top Side]]
            apw = apw .. [[<path d="
                M ]] .. tostring(.3365*screenWidth) .. ' ' .. tostring(.028*screenHeight) .. [[ 
                L ]] .. tostring(.309*screenWidth) .. ' ' .. tostring(.0387*screenHeight) .. [[
                L ]] .. tostring(.2*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [[
                L ]] .. tostring(.31*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [[
                L ]] .. tostring(.3365*screenWidth) .. ' ' .. tostring(.0185*screenHeight) .. [[
                L ]] .. tostring(.3365*screenWidth) .. ' ' .. tostring(.028*screenHeight) .. [["
                stroke="]]..lineColor..[[" stroke-width="1" fill="]]..bg..[[" />
                
                <text x="]].. tostring(.25 * screenWidth) ..[[" y="]].. tostring(.012 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold" transform="rotate(10,]].. tostring(.25 * screenWidth) ..",".. tostring(.012 * screenHeight) ..[[)">AutoPilot: ]]..apStatus..[[</text>
            ]]
        
            if autopilot_dest and speed > 1000 then
                local balance = vec3(autopilot_dest - constructPosition):len()/(speed/3.6) --meters/(meter/second) == seconds
                local seconds = balance % 60
                balance = balance // 60
                local minutes = balance % 60
                balance = balance // 60
                local hours = balance % 60
                apw = apw .. [[
                    <text x="]].. tostring(.280 * screenWidth) ..[[" y="]].. tostring(.055 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">ETA: ]]..string.format('%.0f:%.0f.%.0f',hours,minutes,seconds)..[[</text>
                ]]
            end
        
            apw = apw .. [[</svg>]]
            return apw
        end
        
        function positionInfoWidget()
            local piw = [[
                    <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                    -- Far Left Top Side]]
            piw = piw .. [[<path d="
                M ]] .. tostring(.0*screenWidth) .. ' ' .. tostring(.0155*screenHeight) .. [[ 
                L ]] .. tostring(.115*screenWidth) .. ' ' .. tostring(.0155*screenHeight) .. [[
                L ]] .. tostring(.124*screenWidth) .. ' ' .. tostring(.025*screenHeight) .. [[
                L ]] .. tostring(.25*screenWidth) .. ' ' .. tostring(.035*screenHeight) .. [[
                L ]] .. tostring(.275*screenWidth) .. ' ' .. tostring(.027*screenHeight) .. [[
                L ]] .. tostring(.2*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [[
                L ]] .. tostring(.0*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [[
                L ]] .. tostring(.0*screenWidth) .. ' ' .. tostring(.0155*screenHeight) .. [[ 
                "
                stroke="]]..lineColor..[[" stroke-width="1" fill="]]..bgColor..[[" />
        
                <path d="
                M ]] .. tostring(1.0*screenWidth) .. ' ' .. tostring(.0155*screenHeight) .. [[ 
                L ]] .. tostring(.885*screenWidth) .. ' ' .. tostring(.0155*screenHeight) .. [[
                L ]] .. tostring(.876*screenWidth) .. ' ' .. tostring(.025*screenHeight) .. [[
                L ]] .. tostring(.75*screenWidth) .. ' ' .. tostring(.035*screenHeight) .. [[
                L ]] .. tostring(.725*screenWidth) .. ' ' .. tostring(.027*screenHeight) .. [[
                L ]] .. tostring(.8*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [[
                L ]] .. tostring(1.0*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [[
                L ]] .. tostring(1.0*screenWidth) .. ' ' .. tostring(.0155*screenHeight) .. [[ 
                "
                stroke="]]..lineColor..[[" stroke-width="1" fill="]]..bgColor..[[" />
                
                <text x="]].. tostring(.001 * screenWidth) ..[[" y="]].. tostring(.01 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size=".6vw">Remote Version: ]]..hudVersion..[[</text>
                <text x="]].. tostring(.125 * screenWidth) ..[[" y="]].. tostring(.011 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold">Nearest Planet</text>
                <text x="]].. tostring(.15 * screenWidth) ..[[" y="]].. tostring(.022 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size=".7vw" >]]..closestPlanetStr..[[</text>
                
                <text x="]].. tostring(.82 * screenWidth) ..[[" y="]].. tostring(.011 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold">Nearest Pipe</text>
                <text x="]].. tostring(.78 * screenWidth) ..[[" y="]].. tostring(.022 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size=".7vw" >]]..closestPipeStr..[[</text>
        
                <text x="]].. tostring(.90 * screenWidth) ..[[" y="]].. tostring(.011 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size=".7vw" font-weight="bold">Safe Zone Distance: ]]..SZDStr..[[</text>
        
                </svg>]]
            return piw
        end
        
        function engineWidget()
            local ew = [[
                <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                    <text x="]].. tostring(.001 * screenWidth) ..[[" y="]].. tostring(.045 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">Controlling Engine tags</text>
                    ]]..enabledEngineTagsStr..[[
                </svg>
            ]]
            return ew
        end
        
        function planetARWidget()
            local arw = planetAR
            arw = arw .. [[
                <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                    <text x="]].. tostring(.001 * screenWidth) ..[[" y="]].. tostring(.03 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">Augmented Reality Mode: ]]..AR_Mode..[[</text>
                </svg>
            ]]
        
            return arw
        end
        
        function shipNameWidget()
            local snw = ''
            snw = snw .. [[
                <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                    <text x="]].. tostring(.90 * screenWidth) ..[[" y="]].. tostring(.03 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">Ship Name: ]]..construct.getName()..[[</text>
                </svg>
            ]]
        
            return snw
        end
        
        function helpWidget()
            local hw = ''
            if showHelp then
                hw = [[
                    <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                    <rect x="]].. tostring(.125 * screenWidth) ..[[" y="]].. tostring(.125 * screenHeight) ..[[" rx="15" ry="15" width="60vw" height="22vh" style="fill:rgba(50, 50, 50, 0.9);stroke:white;stroke-width:5;opacity:0.9;" />
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.15 * screenHeight) ..[[" style="fill: ]]..'orange'..[[" font-size="1.42vh" font-weight="bold">
                        OPTION KEY BINDINGS</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.17 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        Alt+1: Toggle help screen (Alt+Shift+1 toggles minimal Remote HUD view)</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.19 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        Alt+2: Toggle Augmented reality view mode (NONE, ALL, PLANETS, CUSTOM) HUD Loads custom waypoints for AR from "autoconf/custom/AR_Waypoints.lua"</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.21 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        Alt+3: Clear all engine tag filters (i.e. all engines controlled by throttle) (Alt+shift+3 toggles through predefined tags)</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.23 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        Alt+4: Engage AutoPilot to current AP destination (shown in VR)</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.25 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        Alt+5: Engage Follow Mode. Ship will attempt to mirror the speed of the target construct (or close the gap if to far away). REQUIRES an identified and targeted construct in radar</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.27 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        Alt+6: Set AutoPilot destination to the nearest safe zone</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.29 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        Alt+7: Toggles radar widget filtering mode (Show all, Show Enemy, Show Identified, Show Friendly)(Alt+Shift+7 toggles radar widget sorting between distance and construct size)</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.31 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        Alt+8: Toggle Shield vent. Start venting if available. Stop venting if currently venting</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.33 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        Alt+9: Toggle between Cruise and Throttle control modes</text>
                    </rect>
                    
                    <rect x="]].. tostring(.125 * screenWidth) ..[[" y="]].. tostring(.365 * screenHeight) ..[[" rx="15" ry="15" width="60vw" height="22vh" style="fill:rgba(50, 50, 50, 0.9);stroke:white;stroke-width:5;opacity:0.9;" />
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.39 * screenHeight) ..[[" style="fill: ]]..'orange'..[[" font-size="1.42vh" font-weight="bold">
                        Lua Commands</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.41 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        disable &lt;tag&gt;: Disables control of engines tagged with the <tag> parameter</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.43 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        enable &lt;tag&gt;: Enables control of engines tagged with <tag></text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.45 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        warpFrom &lt;start position&gt; &lt;destination position&gt;: Calculates best warp bath from the <start position> (positions are in ::pos{} format)</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.47 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        warp &lt;destination position&gt;: Calculates best warp path from current postion to destination (position is in ::pos{} format)</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.49 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        addWaypoint &lt;waypoint1&gt; &lt;Name&gt;: Adds temporary AR points when enabled. Requires a position tag. Optionally, you can also optionally add a custom name as well</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.51 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        delWaypoint &lt;name&gt;: Removes the specified temporary AR point</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.53 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        addShips db: Adds all ships currently on radar to the friendly construct list</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.55 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        code &lt;transponder code&gt;: Adds the transponder tag to the transponder. "delcode &lt;code&gt;" removes the tag</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.57 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        &lt;Primary Target ID&gt;: Filters radar widget to only show the construct with the specified ID</text>
                    </rect>
        
                    </svg>
                ]]
            else
                hw = ''
            end
        
            return hw
        end
        
        function travelIndicatorWidget()
            local p = constructPosition + 2/.000005 * vec3(construct.getWorldOrientationForward())
            local pInfo = library.getPointOnScreen({p['x'],p['y'],p['z']})
        
            local tiw = '<svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">'
            if pInfo[3] ~= 0 then
                if pInfo[1] < .01 then pInfo[1] = .01 end
                if pInfo[2] < .01 then pInfo[2] = .01 end
                local fill = AR_Fill
                local translate = '(0,0)'
                local depth = '8'           
                if pInfo[1] < 1 and pInfo[2] < 1 then
                    translate = string.format('(%.2f,%.2f)',screenWidth*pInfo[1],screenHeight*pInfo[2])
                elseif pInfo[1] > 1 and pInfo[1] < AR_Range and pInfo[2] < 1 then
                    translate = string.format('(%.2f,%.2f)',screenWidth,screenHeight*pInfo[2])
                elseif pInfo[2] > 1 and pInfo[2] < AR_Range and pInfo[1] < 1 then
                    translate = string.format('(%.2f,%.2f)',screenWidth*pInfo[1],screenHeight)
                else
                    translate = string.format('(%.2f,%.2f)',screenWidth,screenHeight)
                end
                tiw = tiw .. [[<g transform="translate]]..translate..[[">
                        <circle cx="0" cy="0" r="]].. Direction_Indicator_Size ..[[px" style="fill:lightgrey;stroke:]]..Direction_Indicator_Color..[[;stroke-width:]]..tostring(Indicator_Width)..[[;opacity:]].. 0.5 ..[[;" />
                        <line x1="]].. Direction_Indicator_Size*1.5 ..[[" y1="0" x2="]].. -Direction_Indicator_Size*1.5 ..[[" y2="0" style="stroke:]]..Direction_Indicator_Color..[[;stroke-width:]]..tostring(Indicator_Width/5)..[[;opacity:]].. 0.85 ..[[;" />
                        <line y1="]].. Direction_Indicator_Size*1.5 ..[[" x1="0" y2="]].. -Direction_Indicator_Size*1.5 ..[[" x2="0" style="stroke:]]..Direction_Indicator_Color..[[;stroke-width:]]..tostring(Indicator_Width/5)..[[;opacity:]].. 0.85 ..[[;" />
                        </g>]]
            end
            if speed > 20 then
                local a = constructPosition + 2/.000005 * vec3(construct.getWorldVelocity())
                local aInfo = library.getPointOnScreen({a['x'],a['y'],a['z']})
                if aInfo[3] ~= 0 then
                    if aInfo[1] < .01 then aInfo[1] = .01 end
                    if aInfo[2] < .01 then aInfo[2] = .01 end
                    local fill = AR_Fill
                    local translate = '(0,0)'
                    local depth = '8'           
                    if aInfo[1] < 1 and aInfo[2] < 1 then
                        translate = string.format('(%.2f,%.2f)',screenWidth*aInfo[1],screenHeight*aInfo[2])
                    elseif aInfo[1] > 1 and aInfo[1] < AR_Range and aInfo[2] < 1 then
                        translate = string.format('(%.2f,%.2f)',screenWidth,screenHeight*aInfo[2])
                    elseif aInfo[2] > 1 and aInfo[2] < AR_Range and aInfo[1] < 1 then
                        translate = string.format('(%.2f,%.2f)',screenWidth*aInfo[1],screenHeight)
                    else
                        translate = string.format('(%.2f,%.2f)',screenWidth,screenHeight)
                    end
                    tiw = tiw .. [[<g transform="translate]]..translate..[[">
                            <circle cx="0" cy="0" r="]].. Prograde_Indicator_Size ..[[px" style="fill:none;stroke:]]..Prograde_Indicator_Color..[[;stroke-width:]]..tostring(Indicator_Width)..[[;opacity:]].. 0.5 ..[[;" />
                            <line x1="]].. Prograde_Indicator_Size*1.4 ..[[" y1="]].. Prograde_Indicator_Size*1.4 ..[[" x2="]].. -Prograde_Indicator_Size*1.4 ..[[" y2="]].. -Prograde_Indicator_Size*1.4 ..[[" style="stroke:]]..Prograde_Indicator_Color..[[;stroke-width:]]..tostring(Indicator_Width/5)..[[;opacity:]].. 0.85 ..[[;" />
                            <line x1="]].. -Prograde_Indicator_Size*1.4 ..[[" y1="]].. Prograde_Indicator_Size*1.4 ..[[" x2="]].. Prograde_Indicator_Size*1.4 ..[[" y2="]].. -Prograde_Indicator_Size*1.4 ..[[" style="stroke:]]..Prograde_Indicator_Color..[[;stroke-width:]]..tostring(Indicator_Width/5)..[[;opacity:]].. 0.85 ..[[;" />
                            </g>]]
                end
                local r = constructPosition - 2/.000005 * vec3(construct.getWorldVelocity())
                local aInfo = library.getPointOnScreen({r['x'],r['y'],r['z']})
                if aInfo[3] ~= 0 then
                    if aInfo[1] < .01 then aInfo[1] = .01 end
                    if aInfo[2] < .01 then aInfo[2] = .01 end
                    local fill = AR_Fill
                    local translate = '(0,0)'
                    local depth = '8'           
                    if aInfo[1] < 1 and aInfo[2] < 1 then
                        translate = string.format('(%.2f,%.2f)',screenWidth*aInfo[1],screenHeight*aInfo[2])
                    elseif aInfo[1] > 1 and aInfo[1] < AR_Range and aInfo[2] < 1 then
                        translate = string.format('(%.2f,%.2f)',screenWidth,screenHeight*aInfo[2])
                    elseif aInfo[2] > 1 and aInfo[2] < AR_Range and aInfo[1] < 1 then
                        translate = string.format('(%.2f,%.2f)',screenWidth*aInfo[1],screenHeight)
                    else
                        translate = string.format('(%.2f,%.2f)',screenWidth,screenHeight)
                    end
                    tiw = tiw .. [[<g transform="translate]]..translate..[[">
                            <circle cx="0" cy="0" r="]].. Prograde_Indicator_Size ..[[px" style="fill:none;stroke:rgb(255, 60, 60);stroke-width:]]..tostring(Indicator_Width)..[[;opacity:]].. 0.5 ..[[;" />
                            <line x1="]].. Prograde_Indicator_Size*1.4 ..[[" y1="]].. Prograde_Indicator_Size*1.4 ..[[" x2="]].. -Prograde_Indicator_Size*1.4 ..[[" y2="]].. -Prograde_Indicator_Size*1.4 ..[[" style="stroke:rgb(255, 60, 60);stroke-width:]]..tostring(Indicator_Width/5)..[[;opacity:]].. 0.85 ..[[;" />
                            <line x1="]].. -Prograde_Indicator_Size*1.4 ..[[" y1="]].. Prograde_Indicator_Size*1.4 ..[[" x2="]].. Prograde_Indicator_Size*1.4 ..[[" y2="]].. -Prograde_Indicator_Size*1.4 ..[[" style="stroke:rgb(255, 60, 60);stroke-width:]]..tostring(Indicator_Width/5)..[[;opacity:]].. 0.85 ..[[;" />
                            </g>]]
                end
            end
            tiw = tiw .. '</svg>'
            return tiw
        end
        
        function warningsWidget()
            local ww = '<svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">'
            local warningText = {}
            warningText['lowFuel'] = fuelWarningText
            warningText['brakes'] = 'Brakes Locked'
        
            local warningColor = {}
            warningColor['lowFuel'] = 'red'
            warningColor['brakes'] = 'orange'
        
            local count = 0
            for k,v in pairs(warnings) do
                if v ~= nil then
                    ww = ww .. string.format([[
                        <svg width="]].. tostring(.03 * screenWidth) ..[[" height="]].. tostring(.03 * screenHeight) ..[[" x="]].. tostring(.24 * screenWidth) ..[[" y="]].. tostring(.06 * screenHeight + .032 * screenHeight * count) ..[[" style="fill: ]]..warningColor[k]..[[;">
                            ]]..warningSymbols[v]..[[
                        </svg>
                        <text x="]].. tostring(.267 * screenWidth) ..[[" y="]].. tostring(.08 * screenHeight + .032 * screenHeight * count) .. [[" style="fill: ]]..warningColor[k]..[[;" font-size="1.7vh" font-weight="bold">]]..warningText[k]..[[</text>
                        ]])
                    count = count + 1
                end
            end
            ww = ww .. '</svg>'
            return ww
        end
        
        function minimalShipInfo()
            local msi = ''
        
            local bg = bgColor
            local apStatus = 'inactive'
            if auto_follow then bg = 'rgba(99, 250, 79, 0.5)' apStatus = 'following' end
            if autopilot then bg = 'rgba(99, 250, 79, 0.5)' apStatus = 'Engaged' end
            if not autopilot and autopilot_dest ~= nil then apStatus = 'Set' end
        
            local eta = ''
            if autopilot_dest and speed > 1000 then
                local balance = vec3(autopilot_dest - constructPosition):len()/(speed/3.6) --meters/(meter/second) == seconds
                local seconds = balance % 60 if seconds < 10 then seconds = string.format('0%.0f',seconds) else seconds = string.format('%.0f',seconds) end
                balance = balance // 60
                local minutes = balance % 60 if minutes < 10 then minutes = string.format('0%.0f',minutes) else minutes = string.format('%.0f',minutes) end
                balance = balance // 60
                local hours = balance % 60
                eta = string.format(' (ETA %.0f:%s.%s)',hours,minutes,seconds)
            end
        
            msi = msi .. [[
                <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                    <text x="]].. tostring(.001 * screenWidth) ..[[" y="]].. tostring(.015 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">Auto Pilot Mode: ]]..apStatus..eta..[[</text>
                </svg>
            ]]
        
            msi = msi .. [[
                <svg style="position: absolute; top: ]]..shipInfoWidgetY..[[vh; left: ]]..shipInfoWidgetX..[[vw;" viewBox="0 0 286 260" width="]]..shipInfoWidgetScale..[[vw">
                    <polygon style="stroke-width: 2px; stroke-linejoin: round; fill: ]]..bgColor..[[; stroke: ]]..lineColor..[[;" points="22 15 266 15 266 32 252 46 22 46"/>
                    <polygon style="stroke-linejoin: round; fill: ]]..bg..[[; stroke: ]]..lineColor..[[;" points="18 17 12 22 12 62 15 66 15 258 18 260"/>
                    <text style="fill: ]]..fontColor..[[; font-size: 17px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="37" y="35">]]..string.format('%s (%s)',construct.getName(),pilotName)..[[</text>
                ]]
            msi = msi .. [[
                    <line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[;" x1="22" y1="54" x2="22" y2="77"/>
                    <text style="fill: ]]..neutralFontColor..[[; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="40" y="73">Top Speed:</text>
                    <text style="fill: ]]..neutralFontColor..[[; font-size: 18px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="137" y="73" font-family: "monospace";>]]..formatNumber(maxSpeed,'speed')..[[</text>
        
                    <line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[;" x1="22" y1="81" x2="22" y2="104"/>
                    <text style="fill: ]]..neutralFontColor..[[; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="40" y="100">Brake Dist:</text>
                    <text style="fill: ]]..neutralFontColor..[[; font-size: 18px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="137" y="100" font-family: "monospace";>]]..formatNumber(brakeDist,'distance')..[[</text>
        
                ]]
        
            msi = msi .. '</svg>'
        
            curFuel = 0
            local fuelWarning = false
            local fuelTankWarning = false
            for i,v in pairs(spacefueltank) do 
                curFuel = curFuel + v.getItemsVolume()
                if v.getItemsVolume()/v.getMaxVolume() < .2 then fuelTankWarning = true end
            end
            sFuelPercent = curFuel/maxFuel * 100
            if sFuelPercent < 20 then fuelWarning = true end
            curFuelStr = string.format('%.2f%%',sFuelPercent)
        
            msi = msi .. string.format([[
                <svg width="100%%" height="100%%" style="position: absolute;left:0%%;top:0%%;font-family: Calibri;">
                    <linearGradient id="sFuel-vertical" x1="0%%" y1="100%%" x2="0%%" y2="0%%">
                    <stop offset="%.1f%%" style="stop-color:rgba(99, 250, 79, 0.95);stop-opacity:.95" />
                    <stop offset="%.1f%%" style="stop-color:rgba(255, 10, 10, 0.5);stop-opacity:.5" />
                    </linearGradient>]],sFuelPercent,sFuelPercent)
        
            msi = msi .. [[
                        <path d="
                            M ]] .. tostring(.843*screenWidth) .. ' ' .. tostring(.052*screenHeight) .. [[
                            L ]] .. tostring(.843*screenWidth) .. ' ' .. tostring(.185*screenHeight) .. [[
                            L ]] .. tostring(.848*screenWidth) .. ' ' .. tostring(.185*screenHeight) .. [[
                            L ]] .. tostring(.848*screenWidth) .. ' ' .. tostring(.052*screenHeight) .. [[
                            L ]] .. tostring(.843*screenWidth) .. ' ' .. tostring(.052*screenHeight) .. [["
                            stroke="]]..lineColor..[[" stroke-width="1" fill="url(#sFuel-vertical)" />
                        <text x="]].. tostring(.80 * screenWidth) ..[[" y="]].. tostring(.198 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.32vh" font-weight="bold">Fuel: ]] .. curFuelStr .. [[</text>
                    </svg>
                ]]
        
            if fuelTankWarning or fuelWarning or showAlerts then
                fuelWarningText = 'Fuel level &lt; 20%'
                if not fuelWarning then fuelWarningText = 'A Fuel tank &lt; 20%%' end
                warnings['lowFuel'] = 'svgWarning'
            else
                warnings['lowFuel'] = nil
            end
        
            msi = msi .. '</svg>'
        
            
            return msi
        end
        
        function generateScreen()
            html = [[ <html> <body style="font-family: Calibri;"> ]]
            html = html .. brakeWidget()
            if showScreen then 
                if minimalWidgets then
                    html = html .. minimalShipInfo()
                else
                    html = html .. flightWidget()
                    html = html .. fuelWidget()
                    html = html .. apStatusWidget()
                    html = html .. positionInfoWidget()
                    html = html .. shipNameWidget()
                end
                html = html .. engineWidget()
                if useLogo then
                    html = html .. [[<svg viewBox="0 0 500 500" width="5vw" height="5vh" style="position: absolute; top: 7vh; left: 0vw;">]] .. logoSVG .. [[
                        </svg>]]
                end
            end
            html = html .. planetARWidget()
            html = html .. helpWidget()
            html = html .. travelIndicatorWidget()
            html = html .. warningsWidget()
        
            html = html .. [[ </body> </html> ]]
            system.setScreen(html)
        end
        
        function globalDB(action)
            if db_1 ~= nil then
                if action == 'get' then
                    if db_1.hasKey('showRemotePanel') == 1 then showRemotePanel = db_1.getIntValue('showRemotePanel') == 1 end
                    if db_1.hasKey('showDockingPanel') == 1 then showDockingPanel = db_1.getIntValue('showDockingPanel') == 1 end
                    if db_1.hasKey('showFuelPanel') == 1 then showFuelPanel = db_1.getIntValue('showFuelPanel') == 1 end
                    if db_1.hasKey('showHelper') == 1 then showHelper = db_1.getIntValue('showHelper') == 1 end
                    if db_1.hasKey('defaultHoverHeight') == 1 then defaultHoverHeight = db_1.getIntValue('defaultHoverHeight') end
                    if db_1.hasKey('defautlFollowDistance') == 1 then defautlFollowDistance = db_1.getIntValue('defautlFollowDistance') end
                    if db_1.hasKey('topHUDLineColorSZ') == 1 then topHUDLineColorSZ = db_1.getStringValue('topHUDLineColorSZ') end
                    if db_1.hasKey('topHUDFillColorSZ') == 1 then topHUDFillColorSZ = db_1.getStringValue('topHUDFillColorSZ') end
                    if db_1.hasKey('textColorSZ') == 1 then textColorSZ = db_1.getStringValue('textColorSZ') end
                    if db_1.hasKey('topHUDLineColorPVP') == 1 then topHUDLineColorPVP = db_1.getStringValue('topHUDLineColorPVP') end
                    if db_1.hasKey('topHUDFillColorPVP') == 1 then topHUDFillColorPVP = db_1.getStringValue('topHUDFillColorPVP') end
                    if db_1.hasKey('textColorPVP') == 1 then textColorPVP = db_1.getStringValue('textColorPVP') end
                    if db_1.hasKey('fuelTextColor') == 1 then fuelTextColor = db_1.getStringValue('fuelTextColor') end
                    if db_1.hasKey('Direction_Indicator_Size') == 1 then Direction_Indicator_Size = db_1.getFloatValue('Direction_Indicator_Size') end
                    if db_1.hasKey('Direction_Indicator_Color') == 1 then Direction_Indicator_Color = db_1.getStringValue('Direction_Indicator_Color') end
                    if db_1.hasKey('Prograde_Indicator_Size') == 1 then Prograde_Indicator_Size = db_1.getFloatValue('Prograde_Indicator_Size') end
                    if db_1.hasKey('Prograde_Indicator_Color') == 1 then Prograde_Indicator_Color = db_1.getStringValue('Prograde_Indicator_Color') end
                    if db_1.hasKey('AP_Brake_Buffer') == 1 then AP_Brake_Buffer = db_1.getFloatValue('AP_Brake_Buffer') end
                    if db_1.hasKey('AP_Max_Rotation_Factor') == 1 then AP_Max_Rotation_Factor = db_1.getFloatValue('AP_Max_Rotation_Factor') end
                    if db_1.hasKey('AR_Mode') == 1 then AR_Mode = db_1.getStringValue('AR_Mode') end
                    if db_1.hasKey('AR_Range') == 1 then AR_Range = db_1.getFloatValue('AR_Range') end
                    if db_1.hasKey('AR_Size') == 1 then AR_Size = db_1.getFloatValue('AR_Size') end
                    if db_1.hasKey('AR_Fill') == 1 then AR_Fill = db_1.getStringValue('AR_Fill') end
                    if db_1.hasKey('AR_Outline') == 1 then AR_Outline = db_1.getStringValue('AR_Outline') end
                    if db_1.hasKey('AR_Opacity') == 1 then AR_Opacity = db_1.getStringValue('AR_Opacity') end
                    if db_1.hasKey('AR_Exclude_Moons') == 1 then AR_Exclude_Moons = db_1.getIntValue('AR_Exclude_Moons') == 1 end
                    if db_1.hasKey('EngineTagColor') == 1 then EngineTagColor = db_1.getStringValue('EngineTagColor') end
                    if db_1.hasKey('Indicator_Width') == 1 then Indicator_Width = db_1.getFloatValue('Indicator_Width') end
                    if db_1.hasKey('warning_size') == 1 then warning_size = db_1.getFloatValue('warning_size') end
                    if db_1.hasKey('warning_outline_color') == 1 then warning_outline_color = db_1.getStringValue('warning_outline_color') end
                    if db_1.hasKey('warning_fill_color') == 1 then warning_fill_color = db_1.getStringValue('warning_fill_color') end
                    if db_1.hasKey('useLogo') == 1 then useLogo = db_1.getIntValue('useLogo') == 1 end
                    if db_1.hasKey('logoSVG') == 1 then logoSVG = db_1.getStringValue('logoSVG') end
                    if db_1.hasKey('minimalWidgets') == 1 then minimalWidgets = db_1.getIntValue('minimalWidgets') == 1 end
                elseif action == 'save' then
                    if showRemotePanel then db_1.setIntValue('showRemotePanel',1) else db_1.setIntValue('showRemotePanel',0) end
                    if showDockingPanel then db_1.setIntValue('showDockingPanel',1) elsedb_1.setIntValue('showDockingPanel',0) end
                    if showFuelPanel then db_1.setIntValue('showFuelPanel',1) else db_1.setIntValue('showFuelPanel',0) end
                    if showHelper then db_1.setIntValue('showHelper',1) else db_1.setIntValue('showHelper',0) end
                    db_1.setIntValue('defaultHoverHeight',defaultHoverHeight)
                    db_1.setIntValue('defautlFollowDistance',defautlFollowDistance)
                    db_1.setStringValue('topHUDLineColorSZ',topHUDLineColorSZ)
                    db_1.setStringValue('topHUDFillColorSZ',topHUDFillColorSZ)
                    db_1.setStringValue('textColorSZ',textColorSZ)
                    db_1.setStringValue('topHUDLineColorPVP',topHUDLineColorPVP)
                    db_1.setStringValue('topHUDFillColorPVP',topHUDFillColorPVP)
                    db_1.setStringValue('textColorPVP',textColorPVP)
                    db_1.setStringValue('fuelTextColor',fuelTextColor)
                    db_1.setFloatValue('Direction_Indicator_Size',Direction_Indicator_Size)
                    db_1.setStringValue('Direction_Indicator_Color',Direction_Indicator_Color)
                    db_1.setFloatValue('Prograde_Indicator_Size',Prograde_Indicator_Size) 
                    db_1.setStringValue('Prograde_Indicator_Color',Prograde_Indicator_Color) 
                    db_1.setFloatValue('AP_Brake_Buffer',AP_Brake_Buffer)
                    db_1.setFloatValue('AP_Max_Rotation_Factor',AP_Max_Rotation_Factor)
                    db_1.setStringValue('AR_Mode',AR_Mode)
                    db_1.setFloatValue('AR_Range',AR_Range)
                    db_1.setFloatValue('AR_Size',AR_Size)
                    db_1.setStringValue('AR_Fill',AR_Fill)
                    db_1.setStringValue('AR_Outline',AR_Outline)
                    db_1.setStringValue('AR_Opacity',AR_Opacity)
                    db_1.setStringValue('EngineTagColor',EngineTagColor)
                    db_1.setFloatValue('Indicator_Width',Indicator_Width)
                    db_1.setFloatValue('warning_size',warning_size)
                    if AR_Exclude_Moons then db_1.setIntValue('AR_Exclude_Moons',1) else db_1.setIntValue('AR_Exclude_Moons',0) end
                    db_1.setStringValue('warning_outline_color',warning_outline_color)
                    db_1.setStringValue('warning_fill_color',warning_fill_color)
                    if useLogo then db_1.setIntValue('useLogo',1) else db_1.setIntValue('useLogo',0) end
                    db_1.setStringValue('logoSVG',logoSVG)
                    if minimalWidgets then db_1.setIntValue('minimalWidgets',1) else db_1.setIntValue('minimalWidgets',0) end
                end
            end
        end
        
        Kinematic = {} -- just a namespace
        local C = 100000000 / 3600
        local C2 = C * C
        local ITERATIONS = 100 -- iterations over engine "warm-up" period
        
        function Kinematic.computeDistanceAndTime(initial, final, restMass, thrust, t50, brakeThrust)
        
            t50 = t50 or 0
            brakeThrust = brakeThrust or 0 -- usually zero when accelerating
            local speedUp = initial <= final
            local a0 = thrust * (speedUp and 1 or -1) / restMass
            local b0 = -brakeThrust / restMass
            local totA = a0 + b0
            if speedUp and totA <= 0 or not speedUp and totA >= 0 then
                return -1, -1 -- no solution
            end
            local distanceToMax, timeToMax = 0, 0
        
            if a0 ~= 0 and t50 > 0 then
        
                local k1 = math.asin(initial / C)
                local c1 = math.pi * (a0 / 2 + b0)
                local c2 = a0 * t50
                local c3 = C * math.pi
                local v = function(t)
                    local w = (c1 * t - c2 * math.sin(math.pi * t / 2 / t50) + c3 * k1) / c3
                    local tan = math.tan(w)
                    return C * tan / msqrt(tan * tan + 1)
                end
                local speedchk = speedUp and function(s)
                    return s >= final
                end or function(s)
                    return s <= final
                end
                timeToMax = 2 * t50
                if speedchk(v(timeToMax)) then
                    local lasttime = 0
                    while mabs(timeToMax - lasttime) > 0.5 do
                        local t = (timeToMax + lasttime) / 2
                        if speedchk(v(t)) then
                            timeToMax = t
                        else
                            lasttime = t
                        end
                    end
                end
                -- There is no closed form solution for distance in this case.
                -- Numerically integrate for time t=0 to t=2*T50 (or less)
                local lastv = initial
                local tinc = timeToMax / ITERATIONS
                for step = 1, ITERATIONS do
                    local speed = v(step * tinc)
                    distanceToMax = distanceToMax + (speed + lastv) * tinc / 2
                    lastv = speed
                end
                if timeToMax < 2 * t50 then
                    return distanceToMax, timeToMax
                end
                initial = lastv
            end
        
            local k1 = C * math.asin(initial / C)
            local time = (C * math.asin(final / C) - k1) / totA
            local k2 = C2 * math.cos(k1 / C) / totA
            local distance = k2 - C2 * math.cos((totA * time + k1) / C) / totA
            return distance + distanceToMax, time + timeToMax
        end
        
        function Kinematic.lorentz(v) return lorentz(v) end
        
        function isNumber(n)  return type(n)           == 'number' end
        function isSNumber(n) return type(tonumber(n)) == 'number' end
        function isTable(t)   return type(t)           == 'table'  end
        function isString(s)  return type(s)           == 'string' end
        function isVector(v)  return isTable(v) and isNumber(v.x and v.y and v.z) end
        
        
        
        ---------------------- TRANSFORM -------------------------
        clamp = utils.clamp
        
        Transform = {}
        
        --
        -- computeHeading - compute compass heading corresponding to a direction.
        -- planetCenter[in]: planet's center in world coordinates.
        -- position    [in]: construct's position in world coordinates.
        -- direction   [in]: the direction in world coordinates of the heading.
        -- return: the heading in radians where 0 is North, PI is South.
        -- 
        function Transform.computeHeading(planetCenter, position, direction)
            planetCenter   = vec3(planetCenter)
            position       = vec3(position)
            direction      = vec3(direction)
            local radius   = position - planetCenter
            if radius.x == 0 and radius.y == 0 then -- at north or south pole
                return radius.z >=0 and math.pi or 0
            end
            local chord    = planetCenter + vec3(0,0,radius:len()) - position
            local north    = chord:project_on_plane(radius):normalize_inplace()
            -- facing north, east is to the right
            local east     = north:cross(radius):normalize_inplace()
            local dir_prj  = direction:project_on_plane(radius):normalize_inplace()
            local adjacent = north:dot(dir_prj)
            local opposite = east:dot(dir_prj)
            local heading  = math.atan(opposite, adjacent) -- North==0
        
            if heading < 0 then heading = heading + 2*math.pi end
            if math.abs(heading - 2*math.pi) < .001 then heading = 0 end
            return heading
        end
        
        function Transform.computePRYangles(yaxis, zaxis, faxis, uaxis)
            yaxis = yaxis.x and yaxis or vec3(yaxis)
            zaxis = zaxis.x and zaxis or vec3(zaxis)
            faxis = faxis.x and faxis or vec3(faxis)
            uaxis = uaxis.x and uaxis or vec3(uaxis)
            local zproject = zaxis:project_on_plane(faxis):normalize_inplace()
            local adjacent = uaxis:dot(zproject)
            local opposite = faxis:cross(zproject):dot(uaxis)
            local roll     = math.atan(opposite, adjacent) -- rotate 'up' around 'fwd'
            local pitch    = math.asin(clamp(faxis:dot(zaxis), -1, 1))
            local fproject = faxis:project_on_plane(zaxis):normalize_inplace()
            local yaw      = math.asin(clamp(yaxis:cross(fproject):dot(zaxis), -1, 1))
            return pitch, roll, yaw
        end
    onUpdate:
      lua: |
        Nav:update()
        
        -- Check player seated status --
        seated = player.isSeated()
        if seated == 1 and player.isFrozen() == 0 then
            player.freeze(1)
        elseif seated == 0 and player.isFrozen() == 1 then
            player.freeze(0)
        end
        ----------------------------------
        
        -- Closest Planet/Pipe info --
        closestPlanetName,closestPlanetDist = closestPlanet()
        closestPipeName,closestPipeDistance = closestPipe()
        closestPipeStr = string.format('%s (%s)',closestPipeName,formatNumber(closestPipeDistance,'distance'))
        closestPlanetStr = string.format('%s (%s)',closestPlanetName,formatNumber(closestPlanetDist,'distance'))
        
        -- Disable AutoPilot if to close to planet --
        if closestPlanetDist < 40000 and autopilot then 
            autopilot = false 
            brakeInput = 1
            brakesOn = true
            system.print('-- autopilot canceled due to planet proximity --')
        end
        
        -- Safe Zone Distance --
        inSZ = construct.isInPvPZone() == 0
        SZD = math.abs(construct.getDistanceToSafeZone())
        local tempSZD = vec3(constructPosition - SZ):len()
        nearestSZPOS = system.getWaypointFromPlayerPos()
        if closestPlanetDist < math.abs(tempSZD - 18000000) then
            local cPlanet = planets[closestPlanetName]
            nearestSZPOS = string.format('::pos{0,0,%.4f,%.4f,%.4f}',cPlanet['x'],cPlanet['y'],cPlanet['z'])
        else
            nearestSZPOS = '::pos{0,0,13771471,7435803,-128971}'
        end
        
        SZDStr = ''
        if SZD < 1000 then SZDStr = string.format('%.2f m',SZD)
        elseif SZD < 100000 then SZDStr = string.format('%.2f km',SZD/1000)
        else SZDStr = string.format('%.2f su',SZD*.000005)
        end
        ---------------------------
        
        -- Engine Tag Filtering --
        enabledEngineTagsStr = ''
        local tempTag = nil
        local offset = 0
        for i,tag in pairs(enabledEngineTags) do
            if i % 2 == 0 then 
                enabledEngineTagsStr = enabledEngineTagsStr .. [[
                    <text x="]].. tostring(.001 * screenWidth) ..[[" y="]].. tostring((.060 + (i-2)*.008) * screenHeight) ..[[" style="fill: ]]..EngineTagColor..[[;" font-weight="bold" font-size=".8vw">]]..tag.. ',' ..tempTag..[[</text>    
                ]]
                tempTag = nil
                offset = offset + 1
            else
                tempTag = tag
            end
        end
        if tempTag ~= nil then 
            enabledEngineTagsStr = enabledEngineTagsStr .. [[<text x="]].. tostring(.001 * screenWidth) ..[[" y="]].. tostring((.060 + (offset)*.016) * screenHeight) ..[[" style="fill: ]]..EngineTagColor..[[;" font-weight="bold" font-size=".8vw">]]..tempTag..[[</text>]]
        end
        if enabledEngineTagsStr == '' then
            enabledEngineTagsStr = [[<text x="]].. tostring(.001 * screenWidth) ..[[" y="]].. tostring((.060 + (offset)*.008) * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size=".8vw">ALL</text>]]
        end
        ----------------------------
        
        -- Auto Follow feature --
        if auto_follow then 
            if not db_1 then
                auto_follow = false
                system.print('-- No databank attached --')
            elseif db_1.hasKey('targetID') == 1 then
                targetID = db_1.getIntValue('targetID')
                if followID == nil or targetID == followID then
                    followID = targetID
                    targetSpeed = db_1.getFloatValue('targetSpeed')
                    targetDist = db_1.getFloatValue('targetDistance')
                    local followBrakeDist = 0
                    if math.abs(speed/3.6 - targetSpeed) > 5 then
                        followBrakeDist,followBrakeTime = Kinematic.computeDistanceAndTime(speed/3.6,targetSpeed,mass,0,0,maxBrake)
                    end
                    if db_1.hasKey('followDistance') == 1 then followDistance = db_1.getFloatValue('followDistance') else followDistance = defautlFollowDistance end
                    followDistance = followDistance + followBrakeDist
                    if followDistance > targetDist and followDistance - followDistance*.1 < targetDist then 
                        -- Set cruise speed to targets speed
                        brakeInput = 0
                        Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)
                        if (Nav.axisCommandManager:getAxisCommandType(0) ~= axisCommandType.byTargetSpeed) then
                            Nav.control.cancelCurrentControlMasterMode()
                        end
                        Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,targetSpeed)
                    elseif followDistance < targetDist then
                        -- Full throttle
                        brakeInput = 0
                        if (Nav.axisCommandManager:getAxisCommandType(0) ~= axisCommandType.byTargetSpeed) then
                            Nav.control.cancelCurrentControlMasterMode()
                        end
                        Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,targetSpeed + followMaxSpeedGain)
                    elseif followDistance - followDistance*.1 > targetDist then
                        -- Full brake
                        brakeInput = 1
                        if (Nav.axisCommandManager:getAxisCommandType(0) ~= axisCommandType.byThrottle) then
                            Nav.control.cancelCurrentControlMasterMode()
                        end
                        Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)
                    end
                elseif followID ~= targetID then
                    if (Nav.axisCommandManager:getAxisCommandType(0) ~= axisCommandType.byThrottle) then
                        Nav.control.cancelCurrentControlMasterMode()
                    end
                    Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)
                    system.print('-- Auto follow cancelled due to target change --')
                    followID = nil
                    auto_follow = false
                    db_1.clearValue('followDistance')
                    db_1.clearValue('targetDistance')
                    db_1.clearValue('targetSpeed')
                    db_1.clearValue('targetID')
                end
            else
                auto_follow = false
                system.print('-- No target found for following --')
            end
        end
        if db_1 then 
            if auto_follow then
                db_1.setIntValue('following',1)
                db_1.setIntValue('followingID',followID)
            else
                followID = nil
                db_1.setIntValue('following',0)
                db_1.setIntValue('followingID',0)
            end
        end
        ---------------------------
        
        -- Generate on screen planets for Augmented Reality view --
        AR_Generate = {}
        if autopilot_dest_pos ~= nil then AR_Generate['AutoPilot'] = convertWaypoint(autopilot_dest_pos) end
        if AR_Mode == 'ALL' then
            for k,v in pairs(AR_Custom_Points) do 
                AR_Generate[k] = convertWaypoint(v)
            end
            for k,v in pairs(planets) do
                AR_Generate[k] = v
            end
            for k,v in pairs(AR_Temp_Points) do 
                AR_Generate[k] = convertWaypoint(v)
            end
        elseif AR_Mode == 'FROM_FILE' then
            for k,v in pairs(AR_Custom_Points) do 
                AR_Generate[k] = convertWaypoint(v)
            end
        elseif AR_Mode == 'TEMPORARY' then
            for k,v in pairs(AR_Temp_Points) do 
                AR_Generate[k] = convertWaypoint(v)
            end
        elseif AR_Mode == 'PLANETS' then
            for k,v in pairs(planets) do
                AR_Generate[k] = v
            end
        end
        planetAR = '<svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">'
        for name,pos in pairs(AR_Generate) do
            if not (name:find('Moon') or name:find('Haven') or name:find('Sanctuary')) or not AR_Exclude_Moons then
                local pDist = vec3(pos - constructPosition):len()
                if pDist*0.000005 < 500  or planets[name] == nil then 
                    local pInfo = library.getPointOnScreen({pos['x'],pos['y'],pos['z']})
                    if pInfo[3] ~= 0 then
                        if pInfo[1] < .01 then pInfo[1] = .01 end
                        if pInfo[2] < .01 then pInfo[2] = .01 end
                        local fill = AR_Fill
                        if planets[name] == nil  and name ~= 'AutoPilot' then fill = 'rgb(49, 182, 60)'
                        elseif name == 'AutoPilot' then fill = 'red'
                        end
                        local translate = '(0,0)'
                        local depth = AR_Size * 1/( 0.02*pDist*0.000005)
                        local pDistStr = ''
                        if pDist < 1000 then pDistStr = string.format('%.2fm',pDist)
                        elseif pDist < 100000 then pDistStr = string.format('%.2fkm',pDist/1000)
                        else pDistStr = string.format('%.2fsu',pDist*0.000005)
                        end
                        if depth > AR_Size then depth = tostring(AR_Size) elseif depth < 1 then depth = '1' else depth = tostring(depth) end
                        if pInfo[1] < 1 and pInfo[2] < 1 then
                            translate = string.format('(%.2f,%.2f)',screenWidth*pInfo[1],screenHeight*pInfo[2])
                        elseif pInfo[1] > 1 and pInfo[1] < AR_Range and pInfo[2] < 1 then
                            translate = string.format('(%.2f,%.2f)',screenWidth,screenHeight*pInfo[2])
                        elseif pInfo[2] > 1 and pInfo[2] < AR_Range and pInfo[1] < 1 then
                            translate = string.format('(%.2f,%.2f)',screenWidth*pInfo[1],screenHeight)
                        else
                            translate = string.format('(%.2f,%.2f)',screenWidth,screenHeight)
                        end
                        planetAR = planetAR .. [[<g transform="translate]]..translate..[[">
                                <circle cx="0" cy="0" r="]].. depth ..[[px" style="fill:]]..fill..[[;stroke:]]..AR_Outline..[[;stroke-width:1;opacity:]]..AR_Opacity..[[;" />
                                <line x1="0" y1="0" x2="-]].. depth*1.2 ..[[" y2="-]].. depth*1.2 ..[[" style="stroke:]]..AR_Outline..[[;stroke-width:1;opacity:]]..AR_Opacity..[[;" />
                                <line x1="-]].. depth*1.2 ..[[" y1="-]].. depth*1.2 ..[[" x2="-]]..tostring(depth*1.2 + 30)..[[" y2="-]].. depth*1.2 ..[[" style="stroke:]]..AR_Outline..[[;stroke-width:1;opacity:]]..AR_Opacity..[[;" />
                                <text x="-]]..tostring(6*#name+depth*1.2)..[[" y="-]].. depth*1.2+screenHeight*0.0035 ..[[" style="fill: ]]..AR_Outline..[[" font-size="]]..tostring(.04*AR_Size)..[[vw">]]..string.format('%s (%s)',name,pDistStr)..[[</text>
                                </g>]]
                    end
                end
            end
        end
        planetAR = planetAR .. '</svg>'
        -----------------------------------------------------------
        
        -- Shield widget if one is linked --
        if shield_1 ~= nil then
            local hp = shield_1.getShieldHitpoints()
            if shield_1.isVenting() == 0 and hp == 0 and autoVent then
                shield_1.startVenting()
            elseif shield_1.isActive() == 0 and shield_1.isVenting() == 0 then 
                shield_1.activate()
            end
            
            local arkTime = system.getArkTime()
            -- Shield Updates --
            local srp = shield_1.getResistancesPool()
            local csr = shield_1.getResistances()
            local rcd = shield_1.getResistancesCooldown()
            if shield_1.getStressRatioRaw()[1] == 0 and shield_1.getStressRatioRaw()[2] == 0 and shield_1.getStressRatioRaw()[3] == 0 and shield_1.getStressRatioRaw()[4] == 0 then
                dmgTick = 0
                srp = srp / 4
                if (csr[1] == srp and csr[2] == srp and csr[3] == srp and csr[4] == srp) or rcd ~= 0 then
                    --No change
                else
                    shield_1.setResistances(srp,srp,srp,srp)
                end
            elseif math.abs(arkTime - dmgTick) >= initialResistWait then
                local srr = shield_1.getStressRatioRaw()
                if (csr[1] == (srp*srr[1]) and csr[2] == (srp*srr[2]) and csr[3] == (srp*srr[3]) and csr[4] == (srp*srr[4])) or rcd ~= 0 then -- If ratio hasn't change, or timer is not up, don't waste the resistance change timer.
                    --No change
                else
                    shield_1.setResistances(srp*srr[1],srp*srr[2],srp*srr[3],srp*srr[4])
                end
            elseif dmgTick == 0 then
                dmgTick = arkTime
            end
        end
        
        -- Choose background color scheme based on PVP --
        bgColor = ''
        lineColor = ''
        fontColor = ''
        if inSZ then bgColor=topHUDFillColorSZ lineColor=topHUDLineColorSZ fontColor=textColorSZ 
        else bgColor=topHUDFillColorPVP lineColor=topHUDLineColorPVP fontColor=textColorPVP
        end
        --------------------------------------------------
        
        ------- Warp Drive Brake activation ------
        if construct.isWarping() == 1 then
            brakeInput = 1
            brakesOn = true
        end
        -----------------------------------------
        
        
        -- Generate Screen overlay --
        if speed ~= nil then generateScreen() end
        -----------------------------
    onFlush:
      lua: |
        ---------- Global Values ----------
        local clamp  = utils.clamp
        local function signedRotationAngle(normal, vecA, vecB)
            vecA = vecA:project_on_plane(normal)
            vecB = vecB:project_on_plane(normal)
            return math.atan(vecA:cross(vecB):dot(normal), vecA:dot(vecB))
        end
        
        if (pitchPID == nil) then
            pitchPID = pid.new(0.1, 0, 10)
            rollPID = pid.new(0.1, 0, 10)
            yawPID = pid.new(0.1, 0, 10)
        end
        
        speedVec = vec3(construct.getWorldVelocity())
        speed = speedVec:len() * 3.6
        direction = speedVec
        if speed < 50 then direction = vec3(construct.getWorldOrientationForward()) end
        maxSpeed = construct.getMaxSpeed() * 3.6
        gravity = core.getGravityIntensity()
        mass = construct.getMass()
        constructPosition = vec3(construct.getWorldPosition())
        maxBrake = json.decode(unit.getWidgetData()).maxBrake
        local maxThrustTags = 'thrust'
        if #enabledEngineTags > 0 then
            maxThrustTags = maxThrustTags .. ' disengaged'
            for i,tag in pairs(enabledEngineTags) do
                maxThrustTags = maxThrustTags .. ',thrust '.. tag
            end
        end
        maxThrust = construct.getMaxThrustAlongAxis(maxThrustTags,construct.getOrientationForward())
        maxSpaceThrust = math.abs(maxThrust[3])
        local dockedMass = 0
        for _,id in pairs(construct.getDockedConstructs()) do 
            dockedMass = dockedMass + construct.getDockedConstructMass(id)
        end
        for _,id in pairs(construct.getPlayersOnBoard()) do 
            dockedMass = dockedMass + construct.getBoardedPlayerMass(id)
        end
        brakeDist,brakeTime = Kinematic.computeDistanceAndTime(speed/3.6,0,mass + dockedMass,0,0,maxBrake)
        accelVec = vec3(construct.getWorldAcceleration())
        accel = accelVec:len()
        
        ------------------------------------
        
        
        local pitchSpeedFactor = 0.8 --export: This factor will increase/decrease the player input along the pitch axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        local yawSpeedFactor =  1 --export: This factor will increase/decrease the player input along the yaw axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        local rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        
        local brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        local brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        
        local autoRoll = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        local autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        
        local turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        local turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        
        local torqueFactor = 2 -- Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        
        -- validate params
        pitchSpeedFactor = math.max(pitchSpeedFactor, 0.01)
        yawSpeedFactor = math.max(yawSpeedFactor, 0.01)
        rollSpeedFactor = math.max(rollSpeedFactor, 0.01)
        torqueFactor = math.max(torqueFactor, 0.01)
        brakeSpeedFactor = math.max(brakeSpeedFactor, 0.01)
        brakeFlatFactor = math.max(brakeFlatFactor, 0.01)
        autoRollFactor = math.max(autoRollFactor, 0.01)
        turnAssistFactor = math.max(turnAssistFactor, 0.01)
        
        -- final inputs
        local finalPitchInput = pitchInput + system.getControlDeviceForwardInput()
        local finalRollInput = rollInput + system.getControlDeviceYawInput()
        local finalYawInput = yawInput - system.getControlDeviceLeftRightInput()
        local finalBrakeInput = brakeInput
        
        -- Axis
        local worldVertical = vec3(core.getWorldVertical()) -- along gravity
        local constructUp = vec3(construct.getWorldOrientationUp())
        local constructForward = vec3(construct.getWorldOrientationForward())
        local constructRight = vec3(construct.getWorldOrientationRight())
        local constructVelocity = vec3(construct.getWorldVelocity())
        local constructVelocityDir = vec3(construct.getWorldVelocity()):normalize()
        local currentRollDeg = getRoll(worldVertical, constructForward, constructRight)
        local currentRollDegAbs = math.abs(currentRollDeg)
        local currentRollDegSign = utils.sign(currentRollDeg)
        
        -- Rotation
        local constructAngularVelocity = vec3(construct.getWorldAngularVelocity())
        -- SETUP AUTOPILOT ROTATIONS --
        local targetAngularVelocity = vec3()
        
        local destVec = vec3()
        local currentYaw = 0
        local currentPitch = 0
        local targetYaw = 0
        local targetPitch = 0
        local yawChange = 0
        local pitchChange = 0
        local totalAngularChange = nil
        if autopilot_dest then
            destVec = vec3(autopilot_dest - constructPosition)
            currentYaw = -math.deg(signedRotationAngle(constructUp, constructVelocity, constructForward))
            currentPitch = math.deg(signedRotationAngle(constructRight, constructVelocity, constructForward))
        
            targetYaw = -math.deg(signedRotationAngle(constructUp, destVec, constructForward))
            local targetPitch = math.deg(signedRotationAngle(constructRight, destVec, constructForward))
        
            yawChange = targetYaw-currentYaw
            pitchChange = targetPitch-currentPitch
            totalAngularChange = math.abs(yawChange) + math.abs(pitchChange)
            --system.print(string.format('%.2f | %.2f',pitchChange,yawChange))
        end
        
        if autopilot and autopilot_dest ~= nil and Nav.axisCommandManager:getThrottleCommand(0) ~= 0 then
            yawPID:inject(yawChange)
            local apYawInput = yawPID:get()
            if apYawInput > AP_Max_Rotation_Factor then apYawInput = AP_Max_Rotation_Factor
            elseif apYawInput < -AP_Max_Rotation_Factor then apYawInput = -AP_Max_Rotation_Factor
            end
        
            pitchPID:inject(pitchChange)
            local apPitchInput = -pitchPID:get()
            if apPitchInput > AP_Max_Rotation_Factor then apPitchInput = AP_Max_Rotation_Factor
            elseif apPitchInput < -AP_Max_Rotation_Factor then apPitchInput = -AP_Max_Rotation_Factor
            end
            targetAngularVelocity = apYawInput * 2 * constructUp
                                    + apPitchInput * 2 * constructRight
                                    + finalPitchInput * pitchSpeedFactor * constructRight
                                    + finalRollInput * rollSpeedFactor * constructForward
                                    + finalYawInput * yawSpeedFactor * constructUp
        else
            targetAngularVelocity = finalPitchInput * pitchSpeedFactor * constructRight
                + finalRollInput * rollSpeedFactor * constructForward
                + finalYawInput * yawSpeedFactor * constructUp
        end
        
        ---------------------------------
        
        -- In atmosphere?
        if worldVertical:len() > 0.01 and unit.getAtmosphereDensity() > 0.0 then
            local autoRollRollThreshold = 1.0
            -- autoRoll on AND currentRollDeg is big enough AND player is not rolling
            if autoRoll == true and currentRollDegAbs > autoRollRollThreshold and finalRollInput == 0 then
                local targetRollDeg = utils.clamp(0,currentRollDegAbs-30, currentRollDegAbs+30);  -- we go back to 0 within a certain limit
                if (rollPID == nil) then
                    rollPID = pid.new(autoRollFactor * 0.01, 0, autoRollFactor * 0.1) -- magic number tweaked to have a default factor in the 1-10 range
                end
                rollPID:inject(targetRollDeg - currentRollDeg)
                local autoRollInput = rollPID:get()
        
                targetAngularVelocity = targetAngularVelocity + autoRollInput * constructForward
            end
            local turnAssistRollThreshold = 20.0
            -- turnAssist AND currentRollDeg is big enough AND player is not pitching or yawing
            if turnAssist == true and currentRollDegAbs > turnAssistRollThreshold and finalPitchInput == 0 and finalYawInput == 0 then
                local rollToPitchFactor = turnAssistFactor * 0.1 -- magic number tweaked to have a default factor in the 1-10 range
                local rollToYawFactor = turnAssistFactor * 0.025 -- magic number tweaked to have a default factor in the 1-10 range
        
                -- rescale (turnAssistRollThreshold -> 180) to (0 -> 180)
                local rescaleRollDegAbs = ((currentRollDegAbs - turnAssistRollThreshold) / (180 - turnAssistRollThreshold)) * 180
                local rollVerticalRatio = 0
                if rescaleRollDegAbs < 90 then
                    rollVerticalRatio = rescaleRollDegAbs / 90
                elseif rescaleRollDegAbs < 180 then
                    rollVerticalRatio = (180 - rescaleRollDegAbs) / 90
                end
        
                rollVerticalRatio = rollVerticalRatio * rollVerticalRatio
        
                local turnAssistYawInput = - currentRollDegSign * rollToYawFactor * (1.0 - rollVerticalRatio)
                local turnAssistPitchInput = rollToPitchFactor * rollVerticalRatio
        
                targetAngularVelocity = targetAngularVelocity
                                    + turnAssistPitchInput * constructRight
                                    + turnAssistYawInput * constructUp
            end
        end
        
        -- Engine commands
        local keepCollinearity = 1 -- for easier reading
        local dontKeepCollinearity = 0 -- for easier reading
        local tolerancePercentToSkipOtherPriorities = 1 -- if we are within this tolerance (in%), we don't go to the next priorities
        
        -- Rotation
        local angularAcceleration = torqueFactor * (targetAngularVelocity - constructAngularVelocity)
        local airAcceleration = vec3(construct.getWorldAirFrictionAngularAcceleration())
        angularAcceleration = angularAcceleration - airAcceleration -- Try to compensate air friction
        Nav:setEngineTorqueCommand('torque', angularAcceleration, keepCollinearity, 'airfoil', '', '', tolerancePercentToSkipOtherPriorities)
        
        -- Brakes
        local brakeAcceleration = vec3()
        if autopilot and autopilot_dest ~= nil and vec3(constructPosition - autopilot_dest):len() <= brakeDist + AP_Brake_Buffer then
            brakeAcceleration = -maxBrake * constructVelocityDir
        elseif autopilot and autopilot_dest ~= nil and not brakesOn then
            brakeAcceleration = vec3()
            brakeInput = 0
        else
            brakeAcceleration = -finalBrakeInput * (brakeSpeedFactor * constructVelocity + brakeFlatFactor * constructVelocityDir)
        end
        Nav:setEngineForceCommand('brake', brakeAcceleration)
        
        -- AutoNavigation regroups all the axis command by 'TargetSpeed'
        local autoNavigationEngineTags = ''
        local autoNavigationAcceleration = vec3()
        local autoNavigationUseBrake = false
        
        -- Longitudinal Translation
        local longitudinalEngineTags = 'thrust analog longitudinal'
        if #enabledEngineTags > 0 then
            longitudinalEngineTags = longitudinalEngineTags .. ' disengaged'
            for i,tag in pairs(enabledEngineTags) do
                longitudinalEngineTags = longitudinalEngineTags .. ',thrust analog longitudinal '.. tag
            end
        end
        local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
        local longitudinalAcceleration = vec3()
        
        if autopilot and autopilot_dest ~= nil and vec3(constructPosition - autopilot_dest):len() <= brakeDist + AP_Brake_Buffer then
            Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)
            longitudinalAcceleration = vec3()
            Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
        elseif autopilot and autopilot_dest ~= nil and speed < maxSpeed - 10 and enginesOn then
            Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,1)
            longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)
            Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
        elseif autopilot and autopilot_dest ~= nil and speed >= maxSpeed - 10 then
            Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)
            longitudinalAcceleration = vec3()
            Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
            enginesOn = false
        else
            if (longitudinalCommandType == axisCommandType.byThrottle) then
                longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)
                Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
            elseif  (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)
                autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. longitudinalEngineTags
                autoNavigationAcceleration = autoNavigationAcceleration + longitudinalAcceleration
                if (Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal) == 0 or -- we want to stop
                    Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal) < - Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal) * 0.5) -- if the longitudinal velocity would need some braking
                then
                    autoNavigationUseBrake = true
                end
        
            end
        end
        
        -- Lateral Translation
        local lateralStrafeEngineTags = 'thrust analog lateral'
        local lateralCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)
        if (lateralCommandType == axisCommandType.byThrottle) then
            local lateralStrafeAcceleration =  Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lateralStrafeEngineTags,axisCommandId.lateral)
            Nav:setEngineForceCommand(lateralStrafeEngineTags, lateralStrafeAcceleration, keepCollinearity)
        elseif  (lateralCommandType == axisCommandType.byTargetSpeed) then
            local lateralAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)
            autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. lateralStrafeEngineTags
            autoNavigationAcceleration = autoNavigationAcceleration + lateralAcceleration
        end
        
        -- Vertical Translation
        local verticalStrafeEngineTags = 'thrust analog vertical'
        local verticalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)
        if (verticalCommandType == axisCommandType.byThrottle) then
            local verticalStrafeAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(verticalStrafeEngineTags,axisCommandId.vertical)
            Nav:setEngineForceCommand(verticalStrafeEngineTags, verticalStrafeAcceleration, keepCollinearity, 'airfoil', 'ground', '', tolerancePercentToSkipOtherPriorities)
        elseif  (verticalCommandType == axisCommandType.byTargetSpeed) then
            local verticalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)
            autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. verticalStrafeEngineTags
            autoNavigationAcceleration = autoNavigationAcceleration + verticalAcceleration
        end
        
        -- Auto Navigation (Cruise Control)
        if (autoNavigationAcceleration:len() > constants.epsilon) then
            if (brakeInput ~= 0 or autoNavigationUseBrake or math.abs(constructVelocityDir:dot(constructForward)) < 0.95)  -- if the velocity is not properly aligned with the forward
            then
                autoNavigationEngineTags = autoNavigationEngineTags .. ', brake'
            end
            Nav:setEngineForceCommand(autoNavigationEngineTags, autoNavigationAcceleration, dontKeepCollinearity, '', '', '', tolerancePercentToSkipOtherPriorities)
        end
        
        -- Rockets
        Nav:setBoosterCommand('rocket_engine')
        
        -- Disable Auto-Pilot when destination is reached --
        if autopilot and autopilot_dest ~= nil and vec3(constructPosition - autopilot_dest):len() <= brakeDist + 100 + AP_Brake_Buffer and speed < 5 then
            system.print('-- Autopilot complete --')
            autopilot_dest_pos = nil
            autopilot = false
            brakeInput = brakeInput + 1
            Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)
            Nav:setEngineForceCommand(longitudinalEngineTags, vec3(), keepCollinearity)
        end
        ---------------------------------------------------
    onInputText(text):
      lua: |
        
        if string.starts(text,'disable ') then
            matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if #matches == 2 then
                text = matches[2]
                local rem = false
                for i,tag in pairs(enabledEngineTags) do
                    if tag == text then rem = i break end
                end
                if rem then table.remove(enabledEngineTags,rem) system.print(string.format('-- Engine tag filter removed "%s"',text)) end
                if text == 'ALL' then enabledEngineTags = {} end
                if #enabledEngineTags == 0 then system.print('-- No tag filtering. All engines enabled --') end
            else
                system.print('-- "disable" command requries an engine tag --')
            end
        end
        if string.starts(text,'enable ') then
            matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if #matches == 2 then
                text = matches[2]
                table.insert(enabledEngineTags,text)
                system.print(string.format('-- Engine tag filter added "%s" --',text))
                
                if text == 'ALL' then enabledEngineTags = {} end
            else
                system.print('-- "enable" command requries an engine tag --')
            end
        end
        if string.starts(text,'warp') then
            if string.starts(text,'warpFrom') then
                matches = {}
                for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
                if #matches == 3 then
                    dest = convertWaypoint(matches[3])
                    start = convertWaypoint(matches[2])
                else
                    system.print('Invalid entry')
                end
            elseif string.starts(text,'warp ') then
                start = nil
                matches = {}
                for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
                dest = convertWaypoint(matches[2])
            end
        
        
            -- Print out a designator to more easily tell
            -- multiple entries apart
            system.print('---------------------')
        
            -- Set initial minimum distance parameter to nil/empty
            local minDist = nil
            local pipeName = 'None'
        
            -- If we are entered both a start point and destination
            -- we will print out slightly different output
            if not start then
                curPos = vec3(construct.getWorldPosition())
                system.print('Selected Destination: ' .. text)
            else
                curPos = start
                system.print('Selected start position: ' .. matches[2])
                system.print('Selected Destination: ' .. matches[3])
            end
        
            -- Loop through all possible warp destinations.
            -- Determine each ones min distance from their
            -- line segment. If that distance is less than
            -- the global minimum, then we have found a new
            -- global minimum
            distType = ''
            for k,v in pairs(warp_beacons) do
                dist,tempType = pipeDist(curPos,v,dest,true)
                if dist ~= nil then
                    -- Once we know which one is the smallest, compare
                    -- it to our current smallest distance and see who
                    -- wins! If this one is smaller, we have a new
                    -- winner! Let's record the name and distance of the
                    -- new winner.
                    if not minDist or dist < minDist then
                        minDist = dist
                        pipeName = k
                        distType = tempType
                    end
                end
            end
        
            -- After we have checked all possible options, print out the final name
            -- and distance.
            system.print(string.format('Closest Warp %s: ',distType) .. pipeName)
            system.print(string.format('Closest Distance: %.2f SU',minDist*0.000005))
            system.print('---------------------')
        end
        if string.starts(text,'addWaypoint ') then
            matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if #matches < 2 then
                system.print('-- Requires a position tag with the command --')
            elseif #matches > 3 then
                system.print('-- only a position tag and name can be given with the command --')
                system.print('-- addWaypoint <position tag> [name] --')
            else
                AR_Temp = true
                if #matches == 2 then
                    AR_Temp_Points['Temp_' .. tostring(#AR_Temp_Points)] = matches[2]
                    system.print(string.format('-- Added waypoint "%s" (%s) --','Temp_' .. tostring(#AR_Temp_Points),matches[2]))
                else
                    AR_Temp_Points[matches[3]] = matches[2]
                    system.print(string.format('-- Added waypoint "%s" (%s) --',matches[3],matches[2]))
                end
            end
        end
        if string.starts(text,'delWaypoint ') then
            matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if #matches ~= 2 then
                system.print('-- Requires a waypoint name with the command --')
            else
                local rem = nil
                local count = 0
                for k,v in pairs(AR_Temp_Points) do
                    count = count + 1
                    if k == matches[2] then
                        rem = k
                    end
                end
                if rem then AR_Temp_Points[rem] = nil count = count -1 system.print(string.format('-- Removed waypoint "%s"',rem)) end
                if count == 0 then AR_Temp = false end
            end
        end
        if string.starts(text,'::pos{') then
            matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            autopilot_dest = vec3(convertWaypoint(matches[1]))
            autopilot_dest_pos = matches[1]
            system.print('-- Autopilot destination set --')
            system.print(matches[1])
        end

    onActionStart:
      args: ['antigravity']
      lua: |
          if antigrav ~= nil then antigrav.toggle() end
    onActionLoop:
      args: ['speeddown']
      lua: |
          if player.isFrozen() == 1 then
              Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, -1.0)
          end
    onActionStart:
      args: ['speeddown']
      lua: |
          if player.isFrozen() == 1 then
              Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, -5.0)
          end
    onActionLoop:
      args: ['speedup']
      lua: |
          if player.isFrozen() == 1 then
              Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, 1.0)
          end
    onActionStart:
      args: ['speedup']
      lua: |
          if player.isFrozen() == 1 then
              Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, 5.0)
          end
    onActionStart:
      args: ['stopengines']
      lua: |
          if Nav.axisCommandManager:getThrottleCommand(0) == 0 then
              Nav.axisCommandManager:setThrottleCommand(0,1)
              enginesOn = true
          else
              Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)
              enginesOn = false
          end
    onActionStart:
      args: ['lshift']
      lua: |
          lShift = true
          if not lAlt then showScreen = false end
    onActionStop:
      args: ['lshift']
      lua: |
          lShift = false
          showScreen = true
    onActionStart:
      args: ['lalt']
      lua: |
          lAlt = true
    onActionStop:
      args: ['lalt']
      lua: |
          lAlt = false
    onActionStart:
      args: ['booster']
      lua: |
          if player.isFrozen() == 1 then
              Nav:toggleBoosters()
          end
    onActionStart:
      args: ['brake']
      lua: |
          
          if brakeInput > 0 then
              brakeInput = 0
              brakesOn = false
          else
              brakeInput = brakeInput + 1
              brakesOn = true
          end
          
          local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
          if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
              local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
              if (math.abs(targetSpeed) > constants.epsilon) then
                  Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, - utils.sign(targetSpeed))
              end
          end

    onActionStart:
      args: ['yawleft']
      lua: |
          if player.isFrozen() == 1 then
              yawInput = yawInput + 1
          end
    onActionStop:
      args: ['yawleft']
      lua: |
          if player.isFrozen() == 1 then
              yawInput = yawInput - 1
          end
    onActionStart:
      args: ['yawright']
      lua: |
          if player.isFrozen() == 1 then
              yawInput = yawInput - 1
          end
    onActionStop:
      args: ['yawright']
      lua: |
          if player.isFrozen() == 1 then
              yawInput = yawInput + 1
          end
    onActionLoop:
      args: ['groundaltitudedown']
      lua: |
          if player.isFrozen() == 1 then
              Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)
          end
    onActionStart:
      args: ['groundaltitudedown']
      lua: |
          Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)
    onActionLoop:
      args: ['groundaltitudeup']
      lua: |
          if player.isFrozen() == 1 then
              Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)
          end
    onActionStart:
      args: ['groundaltitudeup']
      lua: |
          Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)
    onActionStop:
      args: ['down']
      lua: |
          if player.isFrozen() == 1 then
              Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)
              Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
          end
          

    onActionStart:
      args: ['down']
      lua: |
          if player.isFrozen() == 1 then
              Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
              Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)
          end
          

    onActionStop:
      args: ['up']
      lua: |
          if player.isFrozen() == 1 then
              Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, -1.0)
              Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
          end

    onActionStart:
      args: ['up']
      lua: |
          if player.isFrozen() == 1 then
              Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
              Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)
          end
          

    onActionStop:
      args: ['strafeleft']
      lua: |
          if player.isFrozen() == 1 then
              Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, 1.0)
          end
    onActionStart:
      args: ['strafeleft']
      lua: |
          if player.isFrozen() == 1 then
              Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, -1.0)
          end
    onActionStop:
      args: ['straferight']
      lua: |
          if player.isFrozen() == 1 then
              Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, -1.0)
          end
    onActionStart:
      args: ['straferight']
      lua: |
          if player.isFrozen() == 1 then
              Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, 1.0)
          end
    onActionStop:
      args: ['right']
      lua: |
          if player.isFrozen() == 1 then
              rollInput = rollInput - 1
          end
    onActionStart:
      args: ['right']
      lua: |
          rollInput = rollInput + 1
    onActionStop:
      args: ['left']
      lua: |
          if player.isFrozen() == 1 then
              rollInput = rollInput + 1
          end
    onActionStart:
      args: ['left']
      lua: |
          if player.isFrozen() == 1 then
              rollInput = rollInput - 1
          end
    onActionStop:
      args: ['backward']
      lua: |
          if player.isFrozen() == 1 then
              pitchInput = pitchInput - 1
          end
    onActionStart:
      args: ['backward']
      lua: |
          if player.isFrozen() == 1 then
              pitchInput = pitchInput + 1
          end
    onActionStop:
      args: ['forward']
      lua: |
          if player.isFrozen() == 1 then
              pitchInput = pitchInput + 1
          end
    onActionStart:
      args: ['forward']
      lua: |
          if player.isFrozen() == 1 then
              pitchInput = pitchInput - 1
          end
    onActionStart:
      args: ['light']
      lua: |
          if Nav.control.isAnyHeadlightSwitchedOn() == 1 then
              Nav.control.switchOffHeadlights()
          else
              Nav.control.switchOnHeadlights()
          end
          

    onActionStart:
      args: ['gear']
      lua: |
          gearExtended = not gearExtended
          if gearExtended then
              Nav.control.deployLandingGears()
              Nav.axisCommandManager:setTargetGroundAltitude(0)
              player.freeze(false)
          else
              Nav.control.retractLandingGears()
              Nav.axisCommandManager:setTargetGroundAltitude(defaultHoverHeight)
              player.freeze(true)
          end
          


    onActionStart:
      args: ['option1']
      lua: |
          if not lShift then
              if showHelp then
                  if not showHelper then
                      system.showHelper(0)
                  end
                  showHelp = false
              else
                  system.showHelper(1) showHelp = true
              end
          else
              minimalWidgets = not minimalWidgets
              if minimalWidgets then db_1.setIntValue('minimalWidgets',1) else db_1.setIntValue('minimalWidgets',0) end
          end
    onActionStart:
      args: ['option2']
      lua: |
          if AR_Mode == 'ALL' then AR_Mode = 'PLANETS' system.print('-- AR Mode: Planets --')
          elseif AR_Mode == 'PLANETS' and AR_Temp then AR_Mode = 'TEMPORARY' system.print('-- AR Mode: TEMPORARY --')
          elseif AR_Mode == 'PLANETS' and AR_Custom then AR_Mode = 'FROM_FILE' system.print('-- AR Mode: FROM_FILE --')
          elseif AR_Mode == 'PLANETS' then AR_Mode = 'NONE' system.print('-- AR Mode: NONE --')
          elseif AR_Mode == 'TEMPORARY' and AR_Custom then AR_Mode = 'FROM_FILE' system.print('-- AR Mode: FROM_FILE --')
          elseif AR_Mode == 'TEMPORARY' then AR_Mode = 'NONE' system.print('-- AR Mode: NONE --')
          elseif AR_Mode == 'FROM_FILE' then AR_Mode = 'NONE' system.print('-- AR Mode: None --')
          elseif AR_Mode == 'NONE' then AR_Mode = 'ALL' system.print('-- AR Mode: All --')
          end
    onActionStart:
      args: ['option3']
      lua: |
          if lShift then
              local tag = nil
              for i,t in pairs(predefinedTags) do
                  if contains(enabledEngineTags,t) then
                      tag = i
                  end
              end
              if tag then
                  local rem = nil
                  for k,v in pairs(enabledEngineTags) do
                      if v == predefinedTags[tag] then
                          rem = k
                      end
                  end
                  if rem then
                      table.remove(enabledEngineTags,rem)
                  end
                  if tag < #predefinedTags then
                      table.insert(enabledEngineTags,predefinedTags[tag+1])
                      system.print(string.format('-- Engine tag filter changed "%s" to "%s"',predefinedTags[tag],predefinedTags[tag+1]))
                  else
                      system.print(string.format('-- All Engines Enabled --'))
                  end
              else
                  table.insert(enabledEngineTags,predefinedTags[1])
                  system.print(string.format('-- Engine tag filter added "%s"',predefinedTags[1]))
              end
          else
              enabledEngineTags = {}
              system.print('-- All Engines Enabled --')
          end
    onActionStart:
      args: ['option4']
      lua: |
          autopilot = not autopilot
          if autopilot and autopilot_dest == nil then
              autopilot = false
              system.print('-- No autopilot destination entered --')
              system.print('-- Autopilot disabled --')
          elseif not autopilot then
              system.print('-- Autopilot disabled --')
          end
          if autopilot then
              system.print('-- Autopilot engaged --')
              system.setWaypoint(autopilot_dest_pos)
              brakesOn = false
              enginesOn = true
          end
    onActionStart:
      args: ['option5']
      lua: |
          auto_follow = not auto_follow
          if not auto_follow then 
              followID = nil
              if (Nav.axisCommandManager:getAxisCommandType(0) ~= axisCommandType.byThrottle) then
                  Nav.control.cancelCurrentControlMasterMode()
              end
              Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)
          end
          system.print(string.format('-- Auto Follow "%s"',auto_follow))
    onActionStart:
      args: ['option6']
      lua: |
          if inSZ then system.print('-- Already in Safe Zone --') end
          system.print(string.format('-- Nearest SZ Center: %s',nearestSZPOS))
          system.setWaypoint(nearestSZPOS)
          autopilot_dest = vec3(convertWaypoint(nearestSZPOS))

    onActionStart:
      args: ['option7']
      lua: |

    onActionStart:
      args: ['option8']
      lua: |

    onActionStart:
      args: ['option9']
      lua: |
          local masterMode = Nav.axisCommandManager:getMasterMode()
          if (masterMode == controlMasterModeId.travel) then
              Nav.control.cancelCurrentControlMasterMode()
              Nav.axisCommandManager:setMasterMode(controlMasterModeId.cruise)
          else
              Nav.control.cancelCurrentControlMasterMode()
              Nav.axisCommandManager:setMasterMode(controlMasterModeId.travel)
          end