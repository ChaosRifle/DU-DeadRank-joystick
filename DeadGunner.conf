name: DeadGunner v2.1.10
pvp: true

slots:
    core:
        class: CoreUnit
        select: all
    weapon:
        class: WeaponUnit
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual
    db:
        class: DataBank
        select: manual
    shield:
        class: ShieldGeneratorUnit
        select: all
    transponder:
        class: TransponderUnit
        select: all

handlers:
  radar_1:
    onEnter(id):
      lua: |
        cPos = vec3(construct.getWorldPosition())
        if SZD ~= nil and bootTimer > 0 then
            if not inSZ and SZD*0.000005 > radarBuffer then
                system.stopSound()
                system.playSound('contact.mp3')
                if vec3(core_1.getVelocity()):len() * 3.6 > 50000 then
                    warpScan[id] = cPos
                else
                    unknownRadar[id] = cPos
                end
            end
        end
  radar_1:
    onLeave(id):
      lua: |
        cPos = vec3(construct.getWorldPosition())
        local inWS = false
        if warpScan then
            for k,v in pairs(warpScan) do if id == k then inWS = true break end end
            if not inSZ and SZD*0.000005 > radarBuffer then
                system.stopSound()
                system.playSound('targetleft.mp3')
                if inWS then
                    local cored = ''
                    if radar_1.isConstructAbandoned(id) == 1 then
                        cored = '[CORED] '
                    end
                    system.print('----------------------')
                    system.print(string.format('%.0f - (%s[%s] %s) MIDPOINT (::pos{0,0,%.0f,%.0f,%.0f})',system.getArkTime(),cored,radar_1.getConstructCoreSize(id),radar_1.getConstructName(id),(cPos['x']+warpScan[id]['x'])/2,(cPos['y']+warpScan[id]['y'])/2,(cPos['z']+warpScan[id]['z'])/2))
                    system.print('----------------------')
                    system.print()
                    warpScan[id] = nil
                end
            end
        end
  unit:
    onStart:
      lua: |
        
        -- Add Valid User ID --
        masterPlayerID = player.getId()
        pilotName = system.getPlayerName(masterPlayerID)
        validPilotCode = '123456' --Your player ID
        ----------------------
        
        -- SETTINGS --
        useDB = true --export use connected DB for config options
        printCombatLog = true --export Print weapon hits/misses to lua
        dangerWarning = 4 --export
        validatePilot = false --export
        bottomHUDLineColorSZ = 'white' --export
        bottomHUDFillColorSZ = 'rgba(29, 63, 255, 0.75)' --export
        textColorSZ = 'white' --export
        bottomHUDLineColorPVP = 'lightgrey' --export
        bottomHUDFillColorPVP = 'rgba(255, 0, 0, 0.75)' --export
        textColorPVP = 'black' --export
        neutralLineColor = 'lightgrey' --export
        neutralFontColor = 'darkgrey' --export
        generateAutoCode = false --export
        autoVent = true --export Autovent shield at 0 hp
        L_Shield_HP = 11500000 --export
        M_Shield_HP = 8625000 --export
        S_Shield_HP = 8625000 --export
        XS_Shield_HP = 500000 --export
        max_radar_load = 250 --export
        maxWeaponsPerWidget = 3 --export How many weapons in each default weapon widget
        radarBuffer = 0.00001
        ----------------
        
        userCode = {}
        userCode[validPilotCode] = pilotName
        if useDB and db_1 ~= nil then
            globalDB('get')
        end
        
        -- Shield Initialize --
        dmgTick = 0
        --------
        
        --- Radar Initial Values ---
        radarOverload = false
        radarDataID = nil
        radarStart = false
        filterSize = {}
        table.insert(filterSize,'L')
        table.insert(filterSize,'M')
        table.insert(filterSize,'S')
        table.insert(filterSize,'XS')
        friendlySIDs = {}
        useShipID = true
        radarFilter = 'All'
        radarToggles = {}
        table.insert(radarToggles,'All')
        table.insert(radarToggles,'enemy')
        table.insert(radarToggles,'identified')
        table.insert(radarToggles,'friendly')
        table.insert(radarToggles,'primary')
        validSizes = {}
        table.insert(validSizes,'L')
        table.insert(validSizes,'M')
        table.insert(validSizes,'S')
        table.insert(validSizes,'XS')
        radarStats = {
            ['enemy'] = {
                ['L'] = 0,
                ['M'] = 0,
                ['S'] = 0,
                ['XS'] = 0
            },
            ['friendly'] = {
                ['L'] = 0,
                ['M'] = 0,
                ['S'] = 0,
                ['XS'] = 0
            }
        }
        lastDistance = {}
        lastDistanceTime = 0
        speedCompare = 'Stable'
        accelCompare = 'No Accel'
        lastSpeed = {}
        identifiedBy = 0
        attackedBy = 0
        warpScan = {}
        unknownRadar = {}
        ------------------------------
        
        --- Screen Resolution/keys ---
        screenHeight = system.getScreenHeight()
        screenWidth = system.getScreenWidth()
        --------------------------
        
        if db_1 ~= nil then
            for _,key in pairs(db_1.getKeyList()) do
                if db_1.getStringValue(key) ~= nil and db_1.getStringValue(key) ~= '' and string.starts(key,'uc-') then 
                    userCode[string.sub(key,4)] = db_1.getStringValue(key)
                end
            end
        end
        
        inSZ = construct.isInPvPZone() == 0
        SZD = construct.getDistanceToSafeZone()
        
        --- Weapons --
        initialResistWait = 15 --export
        weaponDataList = {}
        shieldDmgTrack = {
            ['L'] = L_Shield_HP,
            ['M'] = M_Shield_HP,
            ['S'] = S_Shield_HP,
            ['XS'] = XS_Shield_HP
        }
        dmgTracker = {}
        primary = nil
        --------------
        
        -- Transponder --
        codeSeed = nil
        tags = {}
        transponderStatus = false
        tCode = nil
        cOverlap = false
        cOverlapTick = 0
        showCode = true
        -----------------
        
        bootTimer = 0
        if validatePilot then
            local validPilot = false
            for k,v in pairs(userCode) do 
                if k == tostring(player.getId()) then validPilot = true system.print(string.format('-- Welcome %s --',pilotName)) break end
            end
            if not validPilot then
                system.print(player.getId())
                unit.exit()
            end
        end
        
        warningHTML = ''
        if radar_1 == nil then
            system.print('ERROR: NO RADAR LINKED')
            warningHTML = [[ 
                <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                <rect x="]].. tostring(.02 * screenWidth) ..[[" y="]].. tostring(.04 * screenHeight) ..[[" rx="15" ry="15" width="7vw" height="4vh" style="fill:rgba(50, 50, 50, 0.9);stroke:red;stroke-width:5;opacity:0.9;" />
                <text x="]].. tostring(.025 * screenWidth) ..[[" y="]].. tostring(.065 * screenHeight) ..[[" style="fill: ]]..'red'..[[" font-size=".8vw" font-weight="bold">
                    NO RADAR LINKED</text>
                </rect></svg>]]
        end
        instructionHTML = ''
        if generateAutoCode then
            system.print('-- ENTER ACTIVATION CODE --')
            local textColor = 'white'
            instructionHTML = [[
            <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                    <rect x="]].. tostring(.25 * screenWidth) ..[[" y="]].. tostring(.125 * screenHeight) ..[[" rx="15" ry="15" width="50vw" height="22vh" style="fill:rgba(50, 50, 50, 0.9);stroke:white;stroke-width:5;opacity:0.9;" />
                    <text x="]].. tostring(.255 * screenWidth) ..[[" y="]].. tostring(.15 * screenHeight) ..[[" style="fill: ]]..'orange'..[[" font-size=".8vw" font-weight="bold">
                        Gunner Chair Startup Instructions</text>
                    <text x="]].. tostring(.255 * screenWidth) ..[[" y="]].. tostring(.17 * screenHeight) ..[[" style="fill: ]]..textColor..[[" font-size=".8vw">
                        1) Press "enter" key and go to lua chat channel</text>
                    <text x="]].. tostring(.255 * screenWidth) ..[[" y="]].. tostring(.19 * screenHeight) ..[[" style="fill: ]]..textColor..[[" font-size=".8vw">
                        2) Enter the number you would like to use as your unique transponder seed</text>
                    <text x="]].. tostring(.265 * screenWidth) ..[[" y="]].. tostring(.21 * screenHeight) ..[[" style="fill: ]]..textColor..[[" font-size=".8vw">
                        (or 0 if you do not want auto generated codes)</text>
                    <text x="]].. tostring(.255 * screenWidth) ..[[" y="]].. tostring(.23 * screenHeight) ..[[" style="fill: ]]..textColor..[[" font-size=".8vw">
                        3) After entering the code, the seat will start</text>
                    <text x="]].. tostring(.255 * screenWidth) ..[[" y="]].. tostring(.25 * screenHeight) ..[[" style="fill: ]]..'orange'..[[" font-size=".8vw" font-weight="bold">
                        Notes:</text>
                    <text x="]].. tostring(.255 * screenWidth) ..[[" y="]].. tostring(.27 * screenHeight) ..[[" style="fill: ]]..textColor..[[" font-size=".8vw">
                         - The code entered will create an auto-generated transponder code that changes every ~15 minutes.</text>
                    <text x="]].. tostring(.27 * screenWidth) ..[[" y="]].. tostring(.29 * screenHeight) ..[[" style="fill: ]]..textColor..[[" font-size=".8vw">
                        Anyone using this HUD and entering the same startup code will have matching transponders</text>
                    <text x="]].. tostring(.255 * screenWidth) ..[[" y="]].. tostring(.31 * screenHeight) ..[[" style="fill: ]]..textColor..[[" font-size=".8vw">
                         - Manually link a data bank to the seat to enable shared functions between the DeadGunner HUD and the DeadRemote HUD</text>
                    <text x="]].. tostring(.255 * screenWidth) ..[[" y="]].. tostring(.33 * screenHeight) ..[[" style="fill: ]]..textColor..[[" font-size=".8vw">
                         - Make sure to run the seat config AFTER linking all radar and weapons to the seat</text>
                    </rect>
                    </svg>]]
        else
            unit.setTimer('booting',1)
            codeSeed = 0
        end
        
        html = [[<html> <body style="font-family: Calibri;">]]
        html = html .. instructionHTML .. warningHTML .. [[</body></html>]]
        system.setScreen(html)
        system.showScreen(1)
        
        radarRange = 0
        if radar_1 ~= nil then
            radarRange = radar_1.getIdentifyRanges()
            if #radarRange > 0 then
                radarRange = radarRange[1]
            else
                local radar_name = radar_1.getName()
                local radar_size = radar_name:match('Space Radar (%w)')
                local ranges = {}
                ranges['s'] = 90750*1.5
                ranges['m'] = 181500*1.5
                ranges['l'] = 400000
                radarRange = ranges[radar_size]
            end
        end

    onStop:
      lua: |
        if transponder_1 ~= nil then
            local r = {}
            for i,v in ipairs(tags) do
                if string.starts(v,'AGC') then
                    table.insert(r,i)
                end
            end
            for k,v in ipairs(r) do
                local rem = table.remove(tags,v)
                system.print('Removing dynamic code: '..rem)
            end
            transponder_1.setTags(tags)
        end
        
        if db_1 ~= nil then db_1.clearValue('targetSpeed') db_1.clearValue('targetFollowDist') db_1.clearValue('targetID') globalDB('save') end
    onTimer:
      args: ['radar']
      lua: |
        for id,pos in pairs(unknownRadar) do
            system.print()
            system.print('------ New Contact -------')
            system.print(string.format('%s',id))
            system.print('First contact:')
            system.print(string.format('::pos{0,0,%s,%s,%s}',pos['x'],pos['y'],pos['z']))
            local cored = ''
            if radar_1.isConstructAbandoned(id) == 1 then
                cored = '[CORED] '
            end
            system.print(string.format('Name: %s%s',cored,radar_1.getConstructName(id)))
            system.print(string.format('Size: %s',radar_1.getConstructCoreSize(id)))
            system.print('---------------------------')
        end
        unknownRadar = {}
    onTimer:
      args: ['booting']
      lua: |
        if bootTimer == 2 then
            if radar_1 then radarData = RadarWidgetCreate() end
            if transponder_1 ~= nil then unit.setTimer('code',.25) end
            radarStart = true
            if radar_1 then unit.setTimer('radar',.75) end
            WeaponWidgetCreate()
            unit.stopTimer('booting')
        else
            system.print('System booting: '..tostring(bootTimer))
        end
        bootTimer = bootTimer + 1
    onTimer:
      args: ['code']
      lua: |
        if transponder_1 ~= nil then
            tags = transponder_1.getTags()
            if transponder_1.isActive() == 1 then transponderStatus = true else transponderStatus = false end
            transponder_1.activate()
        
            if generateAutoCode then
                local a = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'
                math.randomseed(tonumber(string.format('%.0f',codeSeed + system.getArkTime()/1000)))
                local genCode = 'AGC'
                for i = 1,5 do
                    local c = math.random(1,string.len(a))
                    genCode = genCode .. string.sub(a,c,c)
                end
        
        
                if cOverlapTick > 5 then unit.stopTimer('overlap') end
        
                local cApplied = contains(tags,genCode)
                if genCode ~= tCode or not cApplied then
        
                    if cOverlapTick == 0 or cOverlapTick > 3 then 
                        local r = {}
                        for i,v in ipairs(tags) do
                            if string.starts(v,'AGC') then
                                table.insert(r,i)
                            end
                        end
                        for _,i in ipairs(r) do table.remove(tags,i) end
        
                        if cOverlapTick == 0 and tCode ~= nil then
                            cOverlapTick = 1
                            unit.setTimer('overlap',2)
                            system.print('New code generated: ' .. genCode)
                        end
                        if cOverlapTick >= 3 or tCode == nil then
                            unit.stopTimer('overlap')
                            if tCode ~= nil then system.print('Removed old code: ' .. tCode) else system.print('New code generated: ' .. genCode) end
                            tCode = genCode
                            cOverlapTick = 0
                            local r = {}
                            for i,v in ipairs(tags) do
                                if string.starts(v,'AGC') then
                                    table.insert(r,i)
                                end
                            end
                            for _,i in ipairs(r) do table.remove(tags,i) end
                            table.insert(tags,genCode)
                            transponder_1.setTags(tags)
                        else
                            table.insert(tags,genCode)
                            table.insert(tags,tCode)
                            transponder_1.setTags(tags)
                        end
                    end
                end
            end
        end
    onTimer:
      args: ['overlap']
      lua: |
        cOverlapTick = cOverlapTick + 1
  system:
    onStart:
      lua: |
        json = require("dkjson")
        Atlas = require('atlas')
        clamp = utils.clamp
        
        function convertWaypoint(wp)
            local clamp  = utils.clamp
            local deg2rad    = math.pi/180
            local rad2deg    = 180/math.pi
            local epsilon    = 1e-10
        
            local num        = ' *([+-]?%d+%.?%d*e?[+-]?%d*)'
            local posPattern = '::pos{' .. num .. ',' .. num .. ',' ..  num .. ',' .. num ..  ',' .. num .. '}'
            local systemId = wp 
        
            systemId, bodyId, latitude, longitude, altitude = string.match(wp, posPattern)
            assert(systemId, 'Position string is malformed.')
        
            systemId  = tonumber(systemId)
            bodyId    = tonumber(bodyId)
            latitude  = tonumber(latitude)
            longitude = tonumber(longitude)
            altitude  = tonumber(altitude)
        
            if bodyId == 0 then -- this is a hack to represent points in space
            mapPosition =  setmetatable({latitude  = latitude,
                                        longitude = longitude,
                                        altitude  = altitude,
                                        bodyId    = bodyId,
                                        systemId  = systemId}, MapPosition)
            else
            mapPosition = setmetatable({latitude  = deg2rad*clamp(latitude, -90, 90),
                                        longitude = deg2rad*(longitude % 360),
                                        altitude  = altitude,
                                        bodyId    = bodyId,
                                        systemId  = systemId}, MapPosition)
            end
            if mapPosition.bodyId == 0 then
                return vec3(mapPosition.latitude, mapPosition.longitude, mapPosition.altitude)
            end
        
            local center = {
                x=Atlas[systemId][bodyId].center[1],
                y=Atlas[systemId][bodyId].center[2],
                z=Atlas[systemId][bodyId].center[3]
            }
        
            local xproj = math.cos(mapPosition.latitude)
            return center + (Atlas[systemId][bodyId].radius + mapPosition.altitude) *
                vec3(xproj*math.cos(mapPosition.longitude),
                    xproj*math.sin(mapPosition.longitude),
                    math.sin(mapPosition.latitude))
        end
        
        function string.starts(String,Start)
           return string.sub(String,1,string.len(Start))==Start
        end
        
        function contains(tablelist, val)
            for i=1,#tablelist do
               if tablelist[i] == val then 
                  return true
               end
            end
            return false
        end
        
        function WeaponWidgetCreate()
            if type(weapon) == 'table' and #weapon > 0 then
                local _panel = system.createWidgetPanel("Weapons")
                weaponDataList = {}
                for i = 1, #weapon do
                    local weaponDataID = weapon[i].getWidgetDataId()
                    local widgetType = weapon[i].getWidgetType()
                    local _widget = system.createWidget(_panel, "weapon")
                    system.addDataToWidget(weaponDataID,system.createWidget(_panel, widgetType))
                    if i % maxWeaponsPerWidget == 0 and i < #weapon then _panel = system.createWidgetPanel("Weapons") end
                end
            end
        end
        
        function updateRadar(filter)
            local data = radar_1.getWidgetData()
            local radarList = radar_1.getConstructIds()
            local enemyLShips = 0
            local friendlyLShips = 0
            local constructList = {}
            identifiedBy = 0
            attackedBy = 0
            radarStats = {
                ['enemy'] = {
                    ['L'] = 0,
                    ['M'] = 0,
                    ['S'] = 0,
                    ['XS'] = 0
                },
                ['friendly'] = {
                    ['L'] = 0,
                    ['M'] = 0,
                    ['S'] = 0,
                    ['XS'] = 0
                }
            }
            if #radarList > max_radar_load then radarOverload = true return data end
            radarOverload = false
            for _,id in pairs(radarList) do
                local threatLevel = radar_1.getThreatRateFrom(id)
                if threatLevel == 2 then identifiedBy = identifiedBy + 1
                elseif threatLevel == 5 then attackedBy = attackedBy + 1
                end
                local tMatch = radar_1.hasMatchingTransponder(id) == 1
                local abandonded = radar_1.isConstructAbandoned(id) == 1
                local nameOrig = radar_1.getConstructName(id)
                local name = nameOrig--:gsub('%[',''):gsub('%]','')
                nameOrig = nameOrig:gsub('%]','%%]'):gsub('%[','%%[')
                local uniqueCode = string.sub(tostring(id),-3)
                local uniqueName = string.format('[%s] %s',uniqueCode,name)
                if tMatch then 
                    local owner = radar_1.getConstructOwnerEntity(id)
                    if owner['isOrganization'] then
                        owner = system.getOrganization(owner['id'])
                        uniqueName = string.format('[%s] %s',owner['tag'],name)
                    else
                        owner = system.getPlayerName(owner['id'])
                        uniqueName = string.format('[%s] %s',owner,name)
                    end
                elseif abandonded then
                    uniqueName = string.format('[CORED] %s',name)
                end
        
                local shipIDMatch = false
                if useShipID then for k,v in pairs(friendlySIDs) do if id == k then shipIDMatch = true end end end
                local friendly = tMatch or shipIDMatch
                local shipSize = radar_1.getConstructCoreSize(id)
                local shipType = radar_1.getConstructKind(id)
                local identified = radar_1.isConstructIdentified(id) == 1
        
                if shipType == 5 then
                    if friendly then radarStats['friendly'][shipSize] = radarStats['friendly'][shipSize] + 1
                    else radarStats['enemy'][shipSize] = radarStats['enemy'][shipSize] + 1
                    end
                end
        
                if contains(filterSize,shipSize) then
                    if filter == 'enemy' and not friendly then
                        local rawData = data:gmatch('{"constructId":"'..tostring(id)..'"[^}]*}[^}]*}') 
                        for str in rawData do
                            local replacedData = str:gsub(nameOrig,uniqueName)
                            if identified then
                                table.insert(constructList,1,replacedData)
                            else
                                table.insert(constructList,replacedData)
                            end
                        end
                    elseif filter == 'identified' and identified then
                        local rawData = data:gmatch('{"constructId":"'..tostring(id)..'"[^}]*}[^}]*}') 
                        for str in rawData do
                            local replacedData = str:gsub(nameOrig,uniqueName)
                            table.insert(constructList,replacedData)
                        end
                    elseif filter == 'friendly' and friendly then
                        local rawData = data:gmatch('{"constructId":"'..tostring(id)..'"[^}]*}[^}]*}') 
                        for str in rawData do
                            local replacedData = str:gsub(nameOrig,uniqueName)
                            if identified then
                                table.insert(constructList,1,replacedData)
                            else
                                table.insert(constructList,replacedData)
                            end
                        end
                    elseif filter == 'primary' and tostring(primary) == uniqueCode then
                        local rawData = data:gmatch('{"constructId":"'..tostring(id)..'"[^}]*}[^}]*}') 
                        for str in rawData do
                            local replacedData = str:gsub(nameOrig,uniqueName)
                            if identified then
                                table.insert(constructList,1,replacedData)
                            else
                                table.insert(constructList,replacedData)
                            end
                        end
                    elseif radarFilter == 'All' then
                        local rawData = data:gmatch('{"constructId":"'..tostring(id)..'"[^}]*}[^}]*}') 
                        for str in rawData do
                            local replacedData = str:gsub(nameOrig,uniqueName)
                            if identified then
                                table.insert(constructList,1,replacedData)
                            else
                                table.insert(constructList,replacedData)
                            end
                        end
                    end
                end
            end
            data = data:gsub('{"constructId[^}]*}[^}]*},*', "")
            data = data:gsub('"errorMessage":""','"errorMessage":"'..radarFilter..'"')
            data = data:gsub('"constructsList":%[%]','"constructsList":['..table.concat(constructList,',')..']')
            return data
        end
        
        function RadarWidgetCreate()
            local _data = updateRadar(radarFilter)
            local _panel = system.createWidgetPanel("RADAR")
            local _widget = system.createWidget(_panel, "radar")
            radarDataID = system.createData(_data)
            system.addDataToWidget(radarDataID, _widget)
            return radarDataID
        end
        
        function globalDB(action)
            if db_1 ~= nil then
                if action == 'get' then
                    if db_1.hasKey('printCombatLog') == 1 then printCombatLog = db_1.getIntValue('printCombatLog') == 1 end
                    if db_1.hasKey('dangerWarning') == 1 then dangerWarning = db_1.getIntValue('dangerWarning') end
                    if db_1.hasKey('validatePilot') == 1 then validatePilot = db_1.getIntValue('validatePilot') == 1 end
                    if db_1.hasKey('bottomHUDLineColorSZ') == 1 then bottomHUDLineColorSZ = db_1.getStringValue('bottomHUDLineColorSZ') end
                    if db_1.hasKey('bottomHUDFillColorSZ') == 1 then bottomHUDFillColorSZ = db_1.getStringValue('bottomHUDFillColorSZ') end
                    if db_1.hasKey('textColorSZ') == 1 then textColorSZ = db_1.getStringValue('textColorSZ') end
                    if db_1.hasKey('bottomHUDLineColorPVP') == 1 then bottomHUDLineColorPVP = db_1.getStringValue('bottomHUDLineColorPVP') end
                    if db_1.hasKey('bottomHUDFillColorPVP') == 1 then bottomHUDFillColorPVP = db_1.getStringValue('bottomHUDFillColorPVP') end
                    if db_1.hasKey('textColorPVP') == 1 then textColorPVP = db_1.getStringValue('textColorPVP') end
                    if db_1.hasKey('neutralLineColor') == 1 then neutralLineColor = db_1.getStringValue('neutralLineColor') end
                    if db_1.hasKey('neutralFontColor') == 1 then neutralFontColor = db_1.getStringValue('neutralFontColor') end
                    if db_1.hasKey('generateAutoCode') == 1 then generateAutoCode = db_1.getIntValue('generateAutoCode') == 1 end
                    if db_1.hasKey('autoVent') == 1 then autoVent = db_1.getIntValue('autoVent') == 1 end
                    if db_1.hasKey('L_Shield_HP') == 1 then L_Shield_HP = db_1.getIntValue('L_Shield_HP') end
                    if db_1.hasKey('M_Shield_HP') == 1 then M_Shield_HP = db_1.getIntValue('M_Shield_HP') end
                    if db_1.hasKey('S_Shield_HP') == 1 then S_Shield_HP = db_1.getIntValue('S_Shield_HP') end
                    if db_1.hasKey('XS_Shield_HP') == 1 then XS_Shield_HP = db_1.getIntValue('XS_Shield_HP') end
                    if db_1.hasKey('max_radar_load') == 1 then max_radar_load = db_1.getIntValue('max_radar_load') end
                elseif action == 'save' then
                    db_1.setStringValue('uc-'..validPilotCode,pilotName)
                    if printCombatLog then db_1.setIntValue('printCombatLog',1) else db_1.setIntValue('printCombatLog',0) end
                    db_1.setIntValue('dangerWarning',dangerWarning)
                    if validatePilot then db_1.setIntValue('validatePilot',1) else db_1.setIntValue('validatePilot',0) end
                    db_1.setStringValue('bottomHUDLineColorSZ',bottomHUDLineColorSZ)
                    db_1.setStringValue('bottomHUDFillColorSZ',bottomHUDFillColorSZ)
                    db_1.setStringValue('textColorSZ',textColorSZ)
                    db_1.setStringValue('bottomHUDLineColorPVP',bottomHUDLineColorPVP)
                    db_1.setStringValue('bottomHUDFillColorPVP',bottomHUDFillColorPVP)
                    db_1.setStringValue('textColorPVP',textColorPVP)
                    db_1.setStringValue('neutralLineColor',neutralLineColor)
                    db_1.setStringValue('neutralFontColor',neutralFontColor)
                    if generateAutoCode then db_1.setIntValue('generateAutoCode',1) else db_1.setIntValue('generateAutoCode',0) end
                    if autoVent then db_1.setIntValue('autoVent',1) else db_1.setIntValue('autoVent',0) end
                    db_1.setIntValue('L_Shield_HP',L_Shield_HP)
                    db_1.setIntValue('M_Shield_HP',M_Shield_HP)
                    db_1.setIntValue('S_Shield_HP',S_Shield_HP)
                    db_1.setIntValue('XS_Shield_HP',XS_Shield_HP)
                    db_1.setIntValue('max_radar_load',max_radar_load)
                end
            end
        end
        
        function weaponsWidget()
            local ww = '<svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">'
            local wtext = ''
            if weapon_size > 0 then
                local wStatus = {[1] = 'Idle', [2] = 'Firing', [4] = 'Reloading', [5] = 'Unloading'}
                ww = ww .. [[
                    <line x1="]].. 0.02*screenWidth ..[[" y1="]].. 0.665*screenHeight ..[[" x2="]].. 0.15*screenWidth ..[[" y2="]].. 0.665*screenHeight ..[[" style="stroke:]]..neutralLineColor..[[;stroke-width:0.25;opacity:]].. 1 ..[[;" />
                    ]]
                local offset = 1
                for i,w in pairs(weapon) do
                    local textColor = neutralFontColor
                    local ammoColor = 'rgb(60, 255, 60)'
                    local probColor = 'rgb(255, 60, 60)'
                    if w.isOutOfAmmo() == 1 then ammoColor = 'rgb(255, 60, 60)' end
        
                    local probs = w.getHitProbability()
                    if probs > .7 then probColor = 'rgb(60, 255, 60);' elseif probs > .5 then probColor = 'yellow' end
                    
                    local weaponStr = string.format('<div style="position: absolute;font-weight: bold;font-size: .8vw;top: '.. tostring((0.66 - 0.015*i) * screenHeight) ..'px;left: '.. tostring(0.02* screenWidth) ..'px;"><div style="float: left;color: %s;">%s |&nbsp;</div><div style="float: left;color:%s;"> %.2f%% </div><div style="float: left;color: %s;"> | %s |&nbsp;</div><div style="float: left;color: %s;"> Ammo Count: %s </div></div>',textColor,w.getName(),probColor,probs*100,textColor,wStatus[w.getStatus()],ammoColor,w.getAmmoCount())
                    wtext = wtext .. weaponStr
                    offset = i
                end
                offset = offset + 1
                ww = ww .. [[
                    <line x1="]].. 0.02*screenWidth ..[[" y1="]].. (0.675-offset*0.015)*screenHeight ..[[" x2="]].. 0.15*screenWidth ..[[" y2="]].. (0.675-offset*0.015)*screenHeight ..[[" style="stroke:]]..neutralLineColor..[[;stroke-width:0.25;opacity:]].. 1 ..[[;" />
                    ]]
            end
            ww = ww .. '</svg>' .. wtext
            return ww
        end
        
        function transponderWidget()
            local tw = ''
            if transponder_1 ~= nil then
                local transponderColor = 'rgb(255, 60, 60)'
                local transponderStatus = 'offline'
                if transponder_1.isActive() == 1 then transponderColor = 'rgb(25, 247, 255)' transponderStatus = 'Active' end
                tw = tw .. string.format('<div style="position: absolute;font-weight: bold;font-size: .8vw;top: '.. tostring(.932 * screenHeight) ..'px;left: '.. tostring(.505 * screenWidth) ..'px;"><div style="float: left;color: rgba(0,0,0,1);">Transponder Status:&nbsp;</div><div style="float: left;color: %s;"> %s </div></div>',transponderColor,transponderStatus)
                
                local tags = transponder_1.getTags()
                tw = tw .. '<div style="position: absolute;font-weight: bold;font-size: .8vw;top: '.. tostring(.98 * screenHeight) ..'px;left: '.. tostring(.35 * screenWidth) ..'px;"><div style="float: left;color: rgba(255,255,255,1);">Transponder Tags: '
                for i,tag in pairs(tags) do 
                    tw = tw .. tag .. ' '
                end
                tw = tw .. '</div></div>'
            end
        
            return tw
        end
        
        function hpWidget()
            local hw = '<svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">'
            --Center Bottom Base
            hw = hw .. [[
                    <path d="
                    M ]] .. tostring(.31*screenWidth) .. ' ' .. tostring(.999*screenHeight) ..[[ 
                    L ]] .. tostring(.69*screenWidth) .. ' ' .. tostring(.999*screenHeight) .. [[
                    L ]] .. tostring(.67*screenWidth) .. ' ' .. tostring(.95*screenHeight) .. [[
                    L ]] .. tostring(.33*screenWidth) .. ' ' .. tostring(.95*screenHeight) .. [[
                    L ]] .. tostring(.31*screenWidth) .. ' ' .. tostring(.999*screenHeight) .. [["
                    stroke="]]..lineColor..[[" stroke-width="2" fill="]]..bgColor..[[" />]]
        
            --Center Bottom Shield
            if shield_1 then 
                local shieldPercent = shield_1.getShieldHitpoints()/shield_1.getMaxShieldHitpoints()*100
                hw = hw .. string.format([[<linearGradient id="shield" x1="100%%" y1="0%%" x2="0%%" y2="0%%">
                <stop offset="%.1f%%" style="stop-color:rgb(25, 247, 255);stop-opacity:1" />
                <stop offset="%.1f%%" style="stop-color:rgba(255, 60, 60, 1);stop-opacity:1" />
                </linearGradient>]],shieldPercent,shieldPercent)
                hw = hw ..[[
                        <path d="
                        M ]] .. tostring(.3195*screenWidth) .. ' ' .. tostring(.9755*screenHeight) ..[[ 
                        L ]] .. tostring(.5*screenWidth) .. ' ' .. tostring(.9755*screenHeight) .. [[
                        L ]] .. tostring(.5*screenWidth) .. ' ' .. tostring(.95*screenHeight) .. [[
                        L ]] .. tostring(.33*screenWidth) .. ' ' .. tostring(.95*screenHeight) .. [[
                        L ]] .. tostring(.3195*screenWidth) .. ' ' .. tostring(.9755*screenHeight) .. [["
                        stroke="]]..bottomHUDLineColorPVP..[[" stroke-width="1" fill="url(#shield)" />]]
                if shield_1.isVenting() == 0 then
                    hw = hw .. [[
                        <text x="]].. tostring(.39 * screenWidth) ..[[" y="]].. tostring(.968 * screenHeight) ..[[" style="fill: black" font-size=".8vw" font-weight="bold">Shield: ]] .. string.format('%.2f%%',shieldPercent) .. [[</text>
                    ]]
                else 
                    hw = hw .. [[
                        <text x="]].. tostring(.39 * screenWidth) ..[[" y="]].. tostring(.968 * screenHeight) ..[[" style="fill: black" font-size=".8vw" font-weight="bold">Shield: VENTING</text>
                    ]]
                end
            end
        
            --Center Bottom CCS
            local CCSPercent = 100*(core_1.getMaxCoreStress()-core_1.getCoreStress())/core_1.getMaxCoreStress()
            hw = hw .. string.format([[<linearGradient id="CCS" x1="0%%" y1="0%%" x2="100%%" y2="0%%">
            <stop offset="%.1f%%" style="stop-color:rgb(60, 255, 60);stop-opacity:1" />
            <stop offset="%.1f%%" style="stop-color:rgba(255, 60, 60, 1);stop-opacity:1" />
            </linearGradient>]],CCSPercent,CCSPercent)
            hw = hw ..[[
                    <path d="
                    M ]] .. tostring(.6805*screenWidth) .. ' ' .. tostring(.9755*screenHeight) ..[[ 
                    L ]] .. tostring(.5*screenWidth) .. ' ' .. tostring(.9755*screenHeight) .. [[
                    L ]] .. tostring(.5*screenWidth) .. ' ' .. tostring(.95*screenHeight) .. [[
                    L ]] .. tostring(.67*screenWidth) .. ' ' .. tostring(.95*screenHeight) .. [[
                    L ]] .. tostring(.6805*screenWidth) .. ' ' .. tostring(.9755*screenHeight) .. [["
                    stroke="]]..bottomHUDLineColorPVP..[[" stroke-width="1" fill="url(#CCS)" />]]
            hw = hw .. [[
                <text x="]].. tostring(.55 * screenWidth) ..[[" y="]].. tostring(.968 * screenHeight) ..[[" style="fill: black" font-size=".8vw" font-weight="bold">CCS: ]] .. string.format('%.2f%%',CCSPercent) .. [[</text>
            ]]
        
            hw = hw .. '</svg>'
        
            return hw
        end
        
        function resistWidget()
            local rw = '<svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">'
            rw = rw .. [[
                <path d="
                M ]] .. tostring(.4*screenWidth) .. ' ' .. tostring(.95*screenHeight) ..[[ 
                L ]] .. tostring(.5*screenWidth) .. ' ' .. tostring(.95*screenHeight) .. [[
                L ]] .. tostring(.5*screenWidth) .. ' ' .. tostring(.85*screenHeight) .. [[
                L ]] .. tostring(.4*screenWidth) .. ' ' .. tostring(.85*screenHeight) .. [[
                L ]] .. tostring(.4*screenWidth) .. ' ' .. tostring(.95*screenHeight) .. [["
                stroke="]]..neutralLineColor..[[" stroke-width="2" fill="rgba(211,211,211,.1)" />]]
        
            local stress = shield_1.getStressRatioRaw()
            local am = stress[1]
            local em = stress[2]
            local kn = stress[3]
            local th = stress[4]
        
            rw = rw .. [[
                <line x1="]]..tostring(.45*screenWidth)..[[" y1="]]..tostring(.95*screenHeight)..[[" x2="]]..tostring(.45*screenWidth)..[[" y2="]]..tostring(.85*screenHeight)..[[" stroke="]]..neutralLineColor..[[" stroke-width=".5" opacity=1 />
                <line x1="]]..tostring(.40*screenWidth)..[[" y1="]]..tostring(.90*screenHeight)..[[" x2="]]..tostring(.50*screenWidth)..[[" y2="]]..tostring(.90*screenHeight)..[[" stroke="]]..neutralLineColor..[[" stroke-width=".5" opacity=1 />
                ]]
        
            rw = rw .. [[
                <path d="
                M ]] .. tostring(.45*screenWidth) .. ' ' .. tostring(.90*screenHeight - (.04*am + .01)*screenHeight) ..[[ 
                L ]] .. tostring(.45*screenWidth + (.04*em + .01)*screenHeight) .. ' ' .. tostring(.90*screenHeight) .. [[
                L ]] .. tostring(.45*screenWidth) .. ' ' .. tostring(.90*screenHeight + (.04*kn + .01)*screenHeight) .. [[
                L ]] .. tostring(.45*screenWidth - (.04*th + .01)*screenHeight) .. ' ' .. tostring(.90*screenHeight) .. [[
                L ]] .. tostring(.45*screenWidth) .. ' ' .. tostring(.90*screenHeight - (.04*am + .01)*screenHeight) .. [["
                stroke="]]..neutralLineColor..[[" stroke-width="1" fill="rgba(255, 240, 25, 0.4)" />
                
                <text x="]].. tostring(.452 * screenWidth) ..[[" y="]].. tostring(.86 * screenHeight) ..[[" style="fill: white" font-size=".6vw">AM</text>
                <text x="]].. tostring(.49 * screenWidth) ..[[" y="]].. tostring(.91 * screenHeight) ..[[" style="fill: white" font-size=".6vw">EM</text>
                <text x="]].. tostring(.44 * screenWidth) ..[[" y="]].. tostring(.945 * screenHeight) ..[[" style="fill: white" font-size=".6vw">KN</text>
                <text x="]].. tostring(.401 * screenWidth) ..[[" y="]].. tostring(.89 * screenHeight) ..[[" style="fill: white" font-size=".6vw">TH</text>
                <text x="]].. tostring(.40 * screenWidth) ..[[" y="]].. tostring(.841 * screenHeight) ..[[" style="fill: rgba(255, 240, 25, 1);" font-size=".7vw" font-weight="bold">Incoming Damage</text>
                ]]
        
            local srp = shield_1.getResistancesPool()
            local csr = shield_1.getResistances()
            am = csr[1]/srp
            em = csr[2]/srp
            kn = csr[3]/srp
            th = csr[4]/srp
            rw = rw .. [[
                <path d="
                M ]] .. tostring(.45*screenWidth) .. ' ' .. tostring(.90*screenHeight - (.04*am + .01)*screenHeight) ..[[ 
                L ]] .. tostring(.45*screenWidth + (.04*em + .01)*screenHeight) .. ' ' .. tostring(.90*screenHeight) .. [[
                L ]] .. tostring(.45*screenWidth) .. ' ' .. tostring(.90*screenHeight + (.04*kn + .01)*screenHeight) .. [[
                L ]] .. tostring(.45*screenWidth - (.04*th + .01)*screenHeight) .. ' ' .. tostring(.90*screenHeight) .. [[
                L ]] .. tostring(.45*screenWidth) .. ' ' .. tostring(.90*screenHeight - (.04*am + .01)*screenHeight) .. [["
                stroke="black" stroke-width="1" fill="rgba(25, 247, 255, 0.4)" />
                
                <text x="]].. tostring(.452 * screenWidth) ..[[" y="]].. tostring(.841 * screenHeight) ..[[" style="fill: rgb(25, 247, 255);" font-size=".7vw" font-weight="bold">Shield Resistance</text>
                ]]
        
        
            rw = rw .. [[
                <path d="
                M ]] .. tostring(.6*screenWidth) .. ' ' .. tostring(.95*screenHeight) ..[[ 
                L ]] .. tostring(.5*screenWidth) .. ' ' .. tostring(.95*screenHeight) .. [[
                L ]] .. tostring(.5*screenWidth) .. ' ' .. tostring(.85*screenHeight) .. [[
                L ]] .. tostring(.6*screenWidth) .. ' ' .. tostring(.85*screenHeight) .. [[
                L ]] .. tostring(.6*screenWidth) .. ' ' .. tostring(.95*screenHeight) .. [["
                stroke="]]..neutralLineColor..[[" stroke-width="2" fill="rgba(211,211,211,.3)" />
                
                
            ]]
        
            rw = rw .. '</svg>'
            local ventTimer = shield_1.getVentingCooldown()
            local ventTimerColor = 'rgb(25, 247, 255)'
            if ventTimer > 0 then ventTimerColor = 'rgb(255, 60, 60)' end
            rw = rw .. string.format('<div style="position: absolute;font-weight: bold;font-size: .8vw;top: '.. tostring(.855 * screenHeight) ..'px;left: '.. tostring(.505 * screenWidth) ..'px;"><div style="float: left;color: rgba(0,0,0,1);">Vent Timer:&nbsp;</div><div style="float: left;color: %s;"> %.2fs </div></div>',ventTimerColor,ventTimer)
        
            local resistTimer = shield_1.getResistancesCooldown()
            local resistTimerColor = 'rgb(25, 247, 255)'
            if resistTimer > 0 then resistTimerColor = 'rgb(255, 60, 60)' end 
            rw = rw .. string.format('<div style="position: absolute;font-weight: bold;font-size: .8vw;top: '.. tostring(.87 * screenHeight) ..'px;left: '.. tostring(.505 * screenWidth) ..'px;"><div style="float: left;color: rgba(0,0,0,1);">Resist Timer:&nbsp;</div><div style="float: left;color: %s;"> %.2fs </div></div>',resistTimerColor,resistTimer)
            return rw
        end
        
        function radarWidget()
            local rw = ''
            local friendlyShipNum = radarStats['friendly']['L'] + radarStats['friendly']['M'] + radarStats['friendly']['S'] + radarStats['friendly']['XS']
            local enemyShipNum = radarStats['enemy']['L'] + radarStats['enemy']['M'] + radarStats['enemy']['S'] + radarStats['enemy']['XS']
            rw = rw .. string.format('<div style="position: absolute;font-weight: bold;font-size: .8vw;top: '.. tostring(.885 * screenHeight) ..'px;left: '.. tostring(.505 * screenWidth) ..'px;"><div style="float: left;color: rgba(0,0,0,1);">Allied Ships:&nbsp;</div><div style="float: left;color: %s;"> %s </div></div>','rgb(25, 247, 255)',friendlyShipNum)
            rw = rw .. string.format('<div style="position: absolute;font-weight: bold;font-size: .8vw;top: '.. tostring(.9 * screenHeight) ..'px;left: '.. tostring(.505 * screenWidth) ..'px;"><div style="float: left;color: rgba(0,0,0,1);">Enemy Ships:&nbsp;</div><div style="float: left;color: %s;"> %s </div></div>','rgb(255, 60, 60)',enemyShipNum)
            rw = rw .. string.format([[<div style="position: absolute;font-weight: bold;font-size: .8vw;top: ]].. tostring(.915 * screenHeight) ..'px;left: '.. tostring(.505 * screenWidth) ..[[px;">
            <div style="float: left;color: rgba(0,0,0,1);">L:&nbsp;</div><div style="float: left;color: rgb(255, 60, 60);">%s&nbsp;&nbsp;&nbsp;</div>
            <div style="float: left;color: rgba(0,0,0,1);">M:&nbsp;</div><div style="float: left;color: rgb(255, 60, 60);">%s&nbsp;&nbsp;&nbsp;</div>
            <div style="float: left;color: rgba(0,0,0,1);">S:&nbsp;</div><div style="float: left;color: rgb(255, 60, 60);">%s&nbsp;&nbsp;&nbsp;</div>
            <div style="float: left;color: rgba(0,0,0,1);">XS:&nbsp;</div><div style="float: left;color: rgb(255, 60, 60);">%s&nbsp;&nbsp;&nbsp;</div>
            </div>]],radarStats['enemy']['L'],radarStats['enemy']['M'],radarStats['enemy']['S'],radarStats['enemy']['XS'])
        
            if attackedBy >= dangerWarning then
                rw = rw .. [[ 
                    <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                    <rect x="]].. tostring(.45 * screenWidth) ..[[" y="]].. tostring(.35 * screenHeight) ..[[" rx="15" ry="15" width="9vw" height="4vh" style="fill:rgba(50, 50, 50, 0.9);stroke:rgb(255, 60, 60);stroke-width:5;opacity:0.9;" />
                    <text x="]].. tostring(.46 * screenWidth) ..[[" y="]].. tostring(.375 * screenHeight) ..[[" style="fill: ]]..'rgb(255, 60, 60)'..[[" font-size=".8vw" font-weight="bold">
                        ]]..string.format('%.0f Ships attacking you!',attackedBy)..[[</text>
                    </rect></svg>]]
            end
        
            if radarOverload then 
                rw = rw .. [[ 
                    <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                    <rect x="]].. tostring(.45 * screenWidth) ..[[" y="]].. tostring(.15 * screenHeight) ..[[" rx="15" ry="15" width="9vw" height="4vh" style="fill:rgba(50, 50, 50, 0.9);stroke:rgb(255, 60, 60);stroke-width:5;opacity:0.9;" />
                    <text x="]].. tostring(.46 * screenWidth) ..[[" y="]].. tostring(.175 * screenHeight) ..[[" style="fill: ]]..'rgb(255, 60, 60)'..[[" font-size=".8vw" font-weight="bold">
                        ]]..string.format('Radar Overloaded!')..[[</text>
                    </rect></svg>]]
            end
        
            rw = rw .. string.format([[<div style="position: absolute;font-weight: bold;font-size: .8vw;top: ]].. tostring(.15 * screenHeight) ..'px;left: '.. tostring(.90 * screenWidth) ..[[px;">
            <div style="float: left;color: ]]..'white'..[[;">Identified By:&nbsp;</div><div style="float: left;color: orange;">%.0f&nbsp;</div><div style="float: left;color: ]]..'white'..[[;">ships</div></div>]],identifiedBy)
        
            rw = rw .. string.format([[<div style="position: absolute;font-weight: bold;font-size: .8vw;top: ]].. tostring(.165 * screenHeight) ..'px;left: '.. tostring(.90 * screenWidth) ..[[px;">
            <div style="float: left;color: ]]..'white'..[[;">&nbsp;&nbsp;Attacked By:&nbsp;</div><div style="float: left;color: rgb(255, 60, 60);">%.0f&nbsp;</div><div style="float: left;color: ]]..'white'..[[;">ships</div></div>]],attackedBy)
        
            return rw
        end
        
        function identifiedWidget()
            local updateTimer = false
            if math.abs(lastDistanceTime - system.getArkTime()) > .5 then 
                lastDistanceTime = system.getArkTime()
                updateTimer = true
            end
            local identList = radar_1.getIdentifiedConstructIds()
            local targetID = radar_1.getTargetId()
            local followingIdentified = false
            local followingID = 0
            if db_1 ~= nil then 
                if db_1.hasKey('followingID') then
                    followingID = db_1.getIntValue('followingID')
                end
                if not contains(identList,followingID) then
                    db_1.setIntValue('targetID',0) 
                else
                    followingIdentified = true
                end
                if not followingIdentified then db_1.clearValue('targetID') end
            end
            if not contains(identList,targetID) and targetID ~= 0 then table.insert(identList,targetID) end
            local targetIdentified = radar_1.isConstructIdentified(targetID) == 1
            local iw = '<svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">'
            local speedVec = vec3(construct.getWorldVelocity())
            local mySpeed = speedVec:len() * 3.6
            local myMass = construct.getMass()
            local count = 1
            local targetString = ''
            for i,id in pairs(identList) do
                local targeted = targetID == id
                local distance = radar_1.getConstructDistance(id)
                local distString = ''
                if distance < 1000 then distString = string.format('%.2fm',distance)
                elseif distance < 100000 then distString = string.format('%.2fkm',distance/1000)
                else distString = string.format('%.2fsu',distance*.000005)
                end
                local speed = radar_1.getConstructSpeed(id) * 3.6
                local speedDiff = mySpeed - speed
        
                if updateTimer then
                    speedCompare = 'Stable'
                    if lastDistance[id] then
                        if (math.abs(speedDiff) > 1 or speed == 0) and updateTimer then 
                            if lastDistance[id] > distance then speedCompare = 'Closing'
                            elseif lastDistance[id] < distance then speedCompare = 'Parting'
                            end
                            if not targetIdentified then speed = myspeed - (distance - lastDistance[id])/.5*3.6 end
                        end
                    end
                    lastDistance[id] = distance
                end
        
                if updateTimer then
                    accelCompare = 'No Accel'
                    if lastSpeed[id] and radar_1.isConstructIdentified(id) == 1 then
                        if lastSpeed[id] > speed then accelCompare = 'Accelerating'
                        elseif lastSpeed[id] < speed then accelCompare = 'Braking'
                        end
                    end
                    if radar_1.isConstructIdentified(id) == 1 then lastSpeed[id] = speed end
                end
        
                local tMatch = radar_1.hasMatchingTransponder(id) == 1
                local mass = radar_1.getConstructMass(id)
                local outrun = 'Is faster'
                if mass > myMass then outrun = 'Is slower' end
                local massStr = string.format('%.2fkg',mass)
                if mass < 1000 then massStr = string.format('%.2fkg',mass)
                elseif mass < 1000000 then massStr = string.format('%.2ft',mass/1000)
                else massStr = string.format('%.2fkt',mass/1000000)
                end
                local size = radar_1.getConstructCoreSize(id)
                local shipIDMatch = false
                if useShipID then for k,v in pairs(friendlySIDs) do if id == k then shipIDMatch = true end end end
                local friendly = tMatch or shipIDMatch
                local info = radar_1.getConstructInfos(id)
                local weapons = 'False'
                if info['weapons'] ~= 0 then weapons = 'True' end
                
        
                local abandonded = radar_1.isConstructAbandoned(id) == 1
                local nameOrig = radar_1.getConstructName(id)
                local name = nameOrig--:gsub('%[',''):gsub('%]','')
                nameOrig = nameOrig:gsub('%]','%%]'):gsub('%[','%%[')
                local uniqueCode = string.sub(tostring(id),-3)
                local uniqueName = string.format('[%s] %s',uniqueCode,name)
                if tMatch then 
                    local owner = radar_1.getConstructOwnerEntity(id)
                    if owner['isOrganization'] then
                        owner = system.getOrganization(owner['id'])
                        uniqueName = string.format('[%s] %s',owner['tag'],name)
                    else
                        owner = system.getPlayerName(owner['id'])
                        uniqueName = string.format('[%s] %s',owner,name)
                    end
                elseif abandonded then
                    uniqueName = string.format('[CORED] %s',name)
                end
                uniqueName = uniqueName:sub(0,21)
                
                local dmgRatio = 0
                local dmg = 0
                if dmgTracker[tostring(id)] then
                    dmgRatio = clamp(dmgTracker[tostring(id)]/shieldDmgTrack[size],0,1)
                    dmg = dmgTracker[tostring(id)]
                    if dmg < 1000 then dmg = string.format('%.2f',dmg)
                    elseif dmg < 1000000 then dmg = string.format('%.2fk',dmg/1000)
                    else dmg = string.format('%.2fm',dmg/1000000)
                    end
                end
        
                local cardFill = 'rgba(211,211,211,.1)'
                if friendly then cardFill = 'rgba(49, 182, 60,.2)' end
                local lineColor = 'lightgrey'
                if targeted then lineColor = 'orange' end
                if i <= 5 and not targeted then
                    iw = iw .. [[<g transform="translate(0,]]..tostring(.05*screenHeight - count*.07*screenHeight)..[[)">
                    <path d="
                        M ]] .. tostring(.02*screenWidth) .. ' ' .. tostring(.545*screenHeight) ..[[ 
                        L ]] .. tostring(.17*screenWidth) .. ' ' .. tostring(.545*screenHeight) .. [[
                        L ]] .. tostring(.17*screenWidth) .. ' ' .. tostring(.48*screenHeight) .. [[
                        L ]] .. tostring(.02*screenWidth) .. ' ' .. tostring(.48*screenHeight) .. [[
                        L ]] .. tostring(.02*screenWidth) .. ' ' .. tostring(.545*screenHeight) .. [["
                        stroke="]]..lineColor..[[" stroke-width="2" fill="]]..cardFill..[[" />
        
                        <line x1="]].. 0.02*screenWidth ..[[" y1="]].. 0.545*screenHeight ..[[" x2="]].. (0.17-0.15*(1-dmgRatio))*screenWidth ..[[" y2="]].. 0.545*screenHeight ..[[" style="stroke:rgb(255, 60, 60);stroke-width:1.5;opacity:]].. 1 ..[[;" />
        
                        <text x="]].. tostring(.025 * screenWidth) ..[[" y="]].. tostring(.495 * screenHeight) ..[[" style="fill: rgb(60, 255, 60);" font-size=".8vw" font-weight="bold">]] .. tostring(uniqueName) .. [[</text>
                        <text x="]].. tostring(.100 * screenWidth) ..[[" y="]].. tostring(.495 * screenHeight) ..[[" style="fill: rgb(60, 255, 60);" font-size=".8vw" font-weight="bold">Ship Size: ]] .. tostring(size) .. [[</text>
                        
                        <text x="]].. tostring(.025 * screenWidth) ..[[" y="]].. tostring(.510 * screenHeight) ..[[" style="fill: rgb(60, 255, 60);" font-size=".8vw" font-weight="bold">]] .. string.format('Speed: %.2f km/h',speed) .. [[</text>
                        <text x="]].. tostring(.100 * screenWidth) ..[[" y="]].. tostring(.510 * screenHeight) ..[[" style="fill: rgb(60, 255, 60);" font-size=".8vw" font-weight="bold">]] .. string.format('%s: %.0fkm/h',speedCompare,speedDiff) .. [[</text>
                        
                        <text x="]].. tostring(.025 * screenWidth) ..[[" y="]].. tostring(.525 * screenHeight) ..[[" style="fill: rgb(60, 255, 60);" font-size=".8vw" font-weight="bold">]] .. string.format('Mass: %s',massStr) .. [[</text>
                        <text x="]].. tostring(.100 * screenWidth) ..[[" y="]].. tostring(.525 * screenHeight) ..[[" style="fill: rgb(60, 255, 60);" font-size=".8vw" font-weight="bold">]] .. 'Top Speed: '.. outrun .. [[</text>
                        
                        <text x="]].. tostring(.025 * screenWidth) ..[[" y="]].. tostring(.540 * screenHeight) ..[[" style="fill: rgb(60, 255, 60);" font-size=".8vw" font-weight="bold">]] .. string.format('%s',distString) .. [[</text>
                        <text x="]].. tostring(.066 * screenWidth) ..[[" y="]].. tostring(.540 * screenHeight) ..[[" style="fill: rgb(60, 255, 60);" font-size=".8vw" font-weight="bold">]] .. string.format('Radars: %.0f',info['radars']) .. [[</text>
                        <text x="]].. tostring(.103 * screenWidth) ..[[" y="]].. tostring(.540 * screenHeight) ..[[" style="fill: rgb(60, 255, 60);" font-size=".8vw" font-weight="bold">]] .. string.format('Weapons: %s',weapons) .. [[</text>
                        </g>
                    ]]
                    count = count + 1
                end
        
                -- update following data --
                if db_1 ~= nil then
                    if db_1.getIntValue('following') == 1 and id == followingID and followingIdentified then
                        db_1.setIntValue('targetID',id)
                        db_1.setFloatValue('targetSpeed',speed)
                        db_1.setFloatValue('targetDistance',distance)
                        local weaponMin = radarRange - 10000
                        for _,w in pairs(weapon) do if w.getOptimalDistance() - 10000 < weaponMin then weaponMin = w.getOptimalDistance() - 10000 end end
                        db_1.setFloatValue('followDistance',weaponMin)
                    elseif followingID == 0 then
                        db_1.setIntValue('targetID',id)
                        db_1.setFloatValue('targetSpeed',speed)
                        db_1.setFloatValue('targetDistance',distance)
                        weaponMin = radarRange - 10000
                        for _,w in pairs(weapon) do if w.getOptimalDistance() - 10000 < weaponMin then weaponMin = w.getOptimalDistance() - 10000 end end
                        db_1.setFloatValue('followDistance',weaponMin)
                    end
                end
        
                if targeted then
        
                    -- Target Name
                    targetString = targetString .. string.format('<div style="position: absolute;font-weight: bold;font-size: .8vw;top: '.. tostring(.40 * screenHeight) ..'px;left: '.. tostring(.30 * screenWidth) ..[[px;">
                    <div style="float: left;color: white;">Target Name:&nbsp;</div>
                    <div style="float: left;color: orange;">%s</div></div>]],uniqueName)
        
                    -- Target Speed
                    local targetSpeedString = '0.00 km/h -'
                    local targetSpeedColor = neutralFontColor
                    if speedDiff > 0 and math.abs(speedDiff) > 5 then targetSpeedString = string.format('%.2fkm/h &#8593;',speed) targetSpeedColor = 'rgb(60, 255, 60);'
                    elseif speedDiff < 0 and math.abs(speedDiff) > 5 then targetSpeedString = string.format('%.2fkm/h &#8595;',speed) targetSpeedColor = 'rgb(255, 60, 60)'
                    elseif not targetIdentified then targetSpeedString = 'Not Identified'
                    end
                    targetString = targetString .. string.format('<div style="position: absolute;font-weight: bold;font-size: .8vw;top: '.. tostring(.420 * screenHeight) ..'px;left: '.. tostring(.30 * screenWidth) ..[[px;">
                    <div style="float: left;color: white;">Target Speed:&nbsp;</div><div style="float: left;color: %s;"> %s </div></div>]],targetSpeedColor,targetSpeedString)
        
                    -- Target Acceleration
                    local accelString = 'Stable'
                    local accelColor = neutralFontColor
                    if accelCompare == 'Accelerating' then accelString = 'Speeding Up &#8593;' accelColor = 'rgb(60, 255, 60);'
                    elseif accelCompare == 'Braking' then accelString = 'Slowing Down&#8595;' accelColor = 'rgb(255, 60, 60)'
                    elseif not targetIdentified then accelString = 'Not Identified'
                    end
                    targetString = targetString .. string.format('<div style="position: absolute;font-weight: bold;font-size: .8vw;top: '.. tostring(.440 * screenHeight) ..'px;left: '.. tostring(.30 * screenWidth) ..[[px;">
                    <div style="float: left;color: white;">Target Change:&nbsp;</div><div style="float: left;color: %s;"> %s </div></div>]],accelColor,accelString)
        
                    -- Target Gap
                    local speedColor = neutralFontColor
                    if not targetIdentified then speedDiff = 0 end
                    if speedCompare == 'Closing' and math.abs(speedDiff) > 5 then speedColor = 'rgb(60, 255, 60);'
                    elseif speedCompare == 'Parting' and math.abs(speedDiff) > 5 then speedColor = 'rgb(255, 60, 60)'
                    end
                    local fontColor = 'white'
                    if speedColor == 'white' then fontColor = neutralFontColor end
                    targetString = targetString .. string.format('<div style="position: absolute;font-weight: bold;font-size: .8vw;top: '.. tostring(.460 * screenHeight) ..'px;left: '.. tostring(.30 * screenWidth) ..[[px;">
                    <div style="float: left;color: white;">Target Gap:&nbsp;</div><div style="float: left;color: %s;"> %s (%.2fkm/h) </div></div>]],speedColor,speedCompare,speedDiff)
        
                    -- Target Distance
                    local inRange = radarRange >= distance
                    local distanceColor = 'orange'
                    if inRange then distanceColor = 'rgb(60, 255, 60);' end
                    targetString = targetString .. string.format('<div style="position: absolute;font-weight: bold;font-size: .8vw;top: '.. tostring(.400 * screenHeight) ..'px;left: '.. tostring(.60 * screenWidth) ..[[px;">
                    <div style="float: left;color: white;">Target Dist:&nbsp;</div><div style="float: left;color: %s;"> %s </div></div>]],distanceColor,distString)
        
                    -- Target Top Speed
                    local outrunColor = neutralFontColor
                    if not targetIdentified then outrun = 'Not identified' end
                    if outrun == 'Is faster' then outrunColor = 'orange'
                    elseif outrun == 'Is slower' then outrunColor = 'rgb(60, 255, 60);'
                    end
                    targetString = targetString .. string.format('<div style="position: absolute;font-weight: bold;font-size: .8vw;top: '.. tostring(.420 * screenHeight) ..'px;left: '.. tostring(.60 * screenWidth) ..[[px;">
                    <div style="float: left;color: white;">Top Speed:&nbsp;</div><div style="float: left;color: %s;"> %s </div></div>]],outrunColor,outrun)
        
                    -- Target DMG
                    targetString = targetString .. string.format('<div style="position: absolute;font-weight: bold;font-size: .8vw;top: '.. tostring(.440 * screenHeight) ..'px;left: '.. tostring(.60 * screenWidth) ..[[px;">
                    <div style="float: left;color: white;">Damage:&nbsp;</div><div style="float: left;color: %s;"> %s (%.2f%%) </div></div>]],'orange',dmg,(1-dmgRatio)*100)
        
                    -- Target Data
                    if targetIdentified then
                        targetString = targetString .. string.format('<div style="position: absolute;font-weight: bold;font-size: .8vw;top: '.. tostring(.460 * screenHeight) ..'px;left: '.. tostring(.60 * screenWidth) ..[[px;">
                        <div style="float: left;color: white;">Target Data:&nbsp;</div><div style="float: left;color: %s;"> Weapons: %s &nbsp;&nbsp; Radars: %.0f</div></div>]],neutralFontColor,weapons,info['radars'])
                    end
                    
                    if abandonded then
                        targetString = targetString .. [[ 
                            <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                            <rect x="]].. tostring(.455 * screenWidth) ..[[" y="]].. tostring(.35 * screenHeight) ..[[" rx="15" ry="15" width="8vw" height="4vh" style="fill:rgba(50, 50, 50, 0.9);stroke:rgb(255, 60, 60);stroke-width:5;opacity:0.9;" />
                            <text x="]].. tostring(.465 * screenWidth) ..[[" y="]].. tostring(.375 * screenHeight) ..[[" style="fill: ]]..'rgb(255, 60, 60)'..[[" font-size=".8vw" font-weight="bold">
                                Target is Destroyed</text>
                            </rect></svg>]]
                    end
                    if friendly then
                        targetString = targetString .. [[ 
                            <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                            <rect x="]].. tostring(.455 * screenWidth) ..[[" y="]].. tostring(.40 * screenHeight) ..[[" rx="15" ry="15" width="8vw" height="4vh" style="fill:rgba(50, 50, 50, 0.9);stroke:rgb(60, 255, 60);stroke-width:5;opacity:0.9;" />
                            <text x="]].. tostring(.465 * screenWidth) ..[[" y="]].. tostring(.425 * screenHeight) ..[[" style="fill: ]]..'rgb(60, 255, 60);'..[[" font-size=".8vw" font-weight="bold">
                                Target is Friendly</text>
                            </rect></svg>]]
                    end
                end
            end
            
        
            iw = iw .. '</svg>'
            iw = iw .. targetString
        
            local radarRangeString = ''
            if radarRange < 1000 then radarRangeString = string.format('%.2fm',radarRange)
            elseif radarRange < 100000 then radarRangeString = string.format('%.2fkm',radarRange/1000)
            else radarRangeString = string.format('%.2fsu',radarRange*.000005)
            end
            iw = iw .. string.format([[<div style="position: absolute;font-weight: bold;font-size: .8vw;top: ]].. tostring(.185 * screenHeight) ..'px;left: '.. tostring(.875 * screenWidth) ..[[px;">
            <div style="float: left;color: ]]..'white'..[[;">&nbsp;&nbsp;Identification Range:&nbsp;</div><div style="float: left;color: rgb(25, 247, 255);">%s&nbsp;</div></div>]],radarRangeString)
            
            return iw
        end
        
        function generateHTML()
            html = [[ <html> <body style="font-family: Calibri;"> ]]
            html = html .. hpWidget()
            if shield_1 then html = html .. resistWidget() end
            if weapon_1 then html = html .. weaponsWidget() end
            if transponder_1 then html = html .. transponderWidget() end
            if radar_1 then html = html .. radarWidget() end
            if radar_1 then html = html .. identifiedWidget() end
            
            html = html .. [[ </body> </html> ]]
            system.setScreen(html)
        end

    onUpdate:
      lua: |
        arkTime = system.getArkTime()
        
        if bootTimer >= 2 then
            generateHTML()
        end
        
        inSZ = construct.isInPvPZone() == 0
        SZD = construct.getDistanceToSafeZone()
        bgColor = bottomHUDFillColorSZ 
        fontColor = textColorSZ
        lineColor = bottomHUDLineColorSZ
        if not inSZ then 
            lineColor = bottomHUDLineColorPVP
            bgColor = bottomHUDFillColorPVP
            fontColor = textColorPVP
        end
        
        if radarStart and radar_1 then
            local _data = updateRadar(radarFilter)
            system.updateData(radarDataID, _data)
        end
        
        -- Shield Updates --
        if shield_1 then
            local srp = shield_1.getResistancesPool()
            local csr = shield_1.getResistances()
            local rcd = shield_1.getResistancesCooldown()
            if shield_1.getStressRatioRaw()[1] == 0 and shield_1.getStressRatioRaw()[2] == 0 and shield_1.getStressRatioRaw()[3] == 0 and shield_1.getStressRatioRaw()[4] == 0 then
                dmgTick = 0
                srp = srp / 4
                if (csr[1] == srp and csr[2] == srp and csr[3] == srp and csr[4] == srp) or rcd ~= 0 then
                    --No change
                else
                    shield_1.setResistances(srp,srp,srp,srp)
                end
            elseif math.abs(arkTime - dmgTick) >= initialResistWait then
                local srr = shield_1.getStressRatioRaw()
                if (csr[1] == (srp*srr[1]) and csr[2] == (srp*srr[2]) and csr[3] == (srp*srr[3]) and csr[4] == (srp*srr[4])) or rcd ~= 0 then -- If ratio hasn't change, or timer is not up, don't waste the resistance change timer.
                    --No change
                else
                    shield_1.setResistances(srp*srr[1],srp*srr[2],srp*srr[3],srp*srr[4])
                end
            elseif dmgTick == 0 then
                dmgTick = arkTime
            end
        
            local hp = shield_1.getShieldHitpoints()
            if shield_1.isVenting() == 0 and hp == 0 and autoVent then
                shield_1.startVenting()
            elseif shield_1.isActive() == 0 and shield_1.isVenting() == 0 then 
                shield_1.activate()
            end
        
            local coreHP = (core_1.getMaxCoreStress()-core_1.getCoreStress())/core_1.getMaxCoreStress()
            if shield_1.isActive() == 0 and shield_1.isVenting() == 1 and not rD and coreHP < 0.15 then
                shield_1.stopVenting()
                shield_1.activate()
            end
        end
        -- End Shield Updates --
    onInputText(text):
      lua: |
        if string.starts(text:lower(),'code') then
            local matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            table.insert(tags,matches[2])
            transponder_1.setTags(tags)
            transponder_1.deactivate()
            tags = transponder_1.getTags()
            system.print('--Transponder Code Added--')
        end
        if string.starts(text:lower(),'hide codes') then
            showCode = false
            system.print('--Transponder Codes hidden--')
        end
        if string.starts(text:lower(),'show codes') then
            showCode = true
            system.print('--Transponder Codes visible--')
        end
        if string.starts(text:lower(),'delcode') then
            local matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            local r = nil
            for i,v in ipairs(tags) do if v == matches[2] then r = i end end
            table.remove(tags,r)
            transponder_1.setTags(tags)
            transponder_1.deactivate()
            tags = transponder_1.getTags()
            system.print('--Transponder Code Removed--')
        end
        
        if string.starts(text:lower(),'addships') then
            local matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            for _,ship in ipairs(erDisplay) do
                friendlySIDs[ship.id] = 'Auto Add'
                db_1.setStringValue(string.format('sc-%s',ship.id),'Auto Add')
                system.print(string.format('-- Added to friendly list (Name: %s | ID: %s)',ship.name,ship.id))
            end
            for _,ship in ipairs(frDisplay) do
                friendlySIDs[ship.id] = 'Auto Add'
                db_1.setStringValue(string.format('sc-%s',ship.id),'Auto Add')
                system.print(string.format('-- Added to friendly list (Name: %s | ID: %s)',ship.name,ship.id))
            end
        end
        if string.starts(text:lower(),'addshipid') then
            local matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if #matches == 3 then
                friendlySIDs[tonumber(matches[2])] = matches[3]
                db_1.setStringValue(string.format('sc-%s',matches[2]),matches[3])
                system.print(string.format('-- ShipID %s (%s) added to friendly list --',matches[2],matches[3]))
            elseif #matches == 2 then
                friendlySIDs[tonumber(matches[2])] = radar_1.getConstructName(matches[2])
                db_1.setStringValue(string.format('sc-%s',matches[2]),'nil')
                system.print(string.format('-- ShipID %s (%s) added to friendly list --',matches[2],radar_1.getConstructName(matches[2])))
            else
                system.print('-- Invalid command "addFreindlyID <shipID> <pilotname>" --')
            end
            system.print('-- Construct ID added to Friendly list --') 
        end
        if string.starts(text:lower(),'delshipid') then
            local matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            local r = nil
            for k,v in pairs(friendlySIDs) do if k == matches[2] then r = k end end
            if r ~= nil then friendlySIDs[r] = nil end
            if db_1 ~= nil and #matches == 2 then
                if db_1.hasKey('sc-' .. tostring(matches[2])) == 1 then db_1.setStringValue('sc-' .. tostring(matches[2]),nil) end
            end
            system.print('-- Construct removed from Friendly ID list --')
        end
        
        if type(tonumber(text)) == 'number' and (#text == 3 or text == '0') and codeSeed ~= nil then
            if text == '0' then
                    system.print('-- Removing primary target filter --')
                    primary = nil
                    radarFilter = 'All'
            else
                system.print(string.format('-- Adding primary target filter [%s] --',text))
                primary = tostring(text)
                radarFilter = 'primary'
            end
        end
        
        if string.starts(text:lower(),'agc') or codeSeed == nil then
            local matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if (#matches ~= 2 or not tonumber(matches[2])) and codeSeed ~= nil then
                system.print('-- Invalid start command --')
            else
                local t = nil
                if #matches == 2 then t = tonumber(matches[2]) elseif #matches == 1 then t = tonumber(matches[1]) end
                if codeSeed == nil then
                    system.print('-- Booting up --')
                    codeSeed = t
                    system.showScreen(1)
                    unit.setTimer('booting',1)
                else
                    codeSeed = t
                    system.print('-- Code seed changed --')
                end
            end
        end
        if string.starts(text:lower(),'show ') and not string.starts(text,'show code') then
            local matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if #matches ~= 2 then
                system.print('-- Invalid command format --')
            elseif not contains(validSizes,matches[2]) then
                system.print(string.format('-- Invalid filter "%s"',matches[2]))
            else
                if contains(filterSize,matches[2]) then
                    system.print(string.format('-- Already showing %s core size --',matches[2]))
                else
                    system.print(string.format('-- Including %s core size --',matches[2]))
                    table.insert(filterSize,matches[2])
                end
            end
        end
        if string.starts(text:lower(),'hide ') and not string.starts(text,'hide code') then
            local matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if (#matches ~= 2 ) then
                system.print('-- Invalid command format --')
            else
                if not contains(filterSize,matches[2]) then
                    system.print(string.format('-- Already hiding %s core size --',matches[2]))
                else
                    local r = nil
                    for i,v in ipairs(filterSize) do 
                        if v == matches[2] then
                            r = i
                        end
                    end
                    if r ~= nil then
                        system.print(string.format('-- Hiding %s core size --',matches[2]))
                        table.remove(filterSize,r)
                    else
                        system.print(string.format('-- %s core size not found --',matches[2]))
                    end
                end
            end
        end
        if text:lower() == 'print db' then
            if db_1 ~= nil then
                system.print('-- DB READOUT START --')
                for _,key in pairs(db_1.getKeyList()) do
                    if string.find(db_1.getStringValue(key),'::pos') ~= nil or true then
                        system.print(string.format('%s: %s',key,db_1.getStringValue(key)))
                    end
                end
                system.print('-- DB READOUT END --')
            else
                system.print('-- NO DB ATTACHED --')
            end
        end
        if text:lower() == 'clear db' then
            if db_1 ~= nil then
                db_1.clear()
                system.print('-- DB CLEARED --')
            else
                system.print('-- NO DB ATTACHED --')
            end
        end

    onActionStart:
      args: ['option7']
      lua: |
        if radarFilter == 'All' then radarFilter = 'enemy' system.print('-- Radar: enemy --')
        elseif radarFilter == 'enemy' then radarFilter = 'identified' system.print('-- Radar: identified --')
        elseif radarFilter == 'identified' then radarFilter = 'friendly' system.print('-- Radar: friendly --')
        elseif radarFilter == 'friendly' then radarFilter = 'primary' system.print('-- Radar: primary --')
        elseif radarFilter == 'primary' then radarFilter = 'All' system.print('-- Radar: All --')
        end

  weapon_1:
    onHit(targetId,damage):
      lua: |
        if printCombatLog then 
            system.print(string.format('Hit %s for %.0f damage',radar_1.getConstructName(targetId),damage))
        end
        if dmgTracker[tostring(targetId)] then 
            dmgTracker[tostring(targetId)] = dmgTracker[tostring(targetId)] + damage
        else
            dmgTracker[tostring(targetId)] = damage
        end

  weapon_1:
    onMissed(targetId):
      lua: |
        if printCombatLog then 
            system.print(string.format('Missed %s',radar_1.getConstructName(targetId)))
        end
  weapon_1:
    onElementDestroyed(targetId,elementId):
      lua: |
        if printCombatLog then 
            local element = system.getItem(elementId)
            local name = element['displayName']
            system.print(string.format('Destroyed %s on %s',name,radar_1.getConstructName(targetId)))
        end
  weapon_2:
    onHit(targetId,damage):
      lua: |
        if printCombatLog then 
            system.print(string.format('Hit %s for %.0f damage',radar_1.getConstructName(targetId),damage))
        end
        if dmgTracker[tostring(targetId)] then 
            dmgTracker[tostring(targetId)] = dmgTracker[tostring(targetId)] + damage
        else
            dmgTracker[tostring(targetId)] = damage
        end

  weapon_2:
    onMissed(targetId):
      lua: |
        if printCombatLog then 
            system.print(string.format('Missed %s',radar_1.getConstructName(targetId)))
        end
  weapon_2:
    onElementDestroyed(targetId,elementId):
      lua: |
        if printCombatLog then 
            local element = system.getItem(elementId)
            local name = element['displayName']
            system.print(string.format('Destroyed %s on %s',name,radar_1.getConstructName(targetId)))
        end
  weapon_3:
    onHit(targetId,damage):
      lua: |
        if printCombatLog then 
            system.print(string.format('Hit %s for %.0f damage',radar_1.getConstructName(targetId),damage))
        end
        if dmgTracker[tostring(targetId)] then 
            dmgTracker[tostring(targetId)] = dmgTracker[tostring(targetId)] + damage
        else
            dmgTracker[tostring(targetId)] = damage
        end

  weapon_3:
    onMissed(targetId):
      lua: |
        if printCombatLog then 
            system.print(string.format('Missed %s',radar_1.getConstructName(targetId)))
        end
  weapon_3:
    onElementDestroyed(targetId,elementId):
      lua: |
        if printCombatLog then 
            local element = system.getItem(elementId)
            local name = element['displayName']
            system.print(string.format('Destroyed %s on %s',name,radar_1.getConstructName(targetId)))
        end
  weapon_4:
    onHit(targetId,damage):
      lua: |
        if printCombatLog then 
            system.print(string.format('Hit %s for %.0f damage',radar_1.getConstructName(targetId),damage))
        end
        if dmgTracker[tostring(targetId)] then 
            dmgTracker[tostring(targetId)] = dmgTracker[tostring(targetId)] + damage
        else
            dmgTracker[tostring(targetId)] = damage
        end

  weapon_4:
    onMissed(targetId):
      lua: |
        if printCombatLog then 
            system.print(string.format('Missed %s',radar_1.getConstructName(targetId)))
        end
  weapon_4:
    onElementDestroyed(targetId,elementId):
      lua: |
        if printCombatLog then 
            local element = system.getItem(elementId)
            local name = element['displayName']
            system.print(string.format('Destroyed %s on %s',name,radar_1.getConstructName(targetId)))
        end
  weapon_5:
    onHit(targetId,damage):
      lua: |
        if printCombatLog then 
            system.print(string.format('Hit %s for %.0f damage',radar_1.getConstructName(targetId),damage))
        end
        if dmgTracker[tostring(targetId)] then 
            dmgTracker[tostring(targetId)] = dmgTracker[tostring(targetId)] + damage
        else
            dmgTracker[tostring(targetId)] = damage
        end

  weapon_5:
    onMissed(targetId):
      lua: |
        if printCombatLog then 
            system.print(string.format('Missed %s',radar_1.getConstructName(targetId)))
        end
  weapon_5:
    onElementDestroyed(targetId,elementId):
      lua: |
        if printCombatLog then 
            local element = system.getItem(elementId)
            local name = element['displayName']
            system.print(string.format('Destroyed %s on %s',name,radar_1.getConstructName(targetId)))
        end
  weapon_6:
    onHit(targetId,damage):
      lua: |
        if printCombatLog then 
            system.print(string.format('Hit %s for %.0f damage',radar_1.getConstructName(targetId),damage))
        end
        if dmgTracker[tostring(targetId)] then 
            dmgTracker[tostring(targetId)] = dmgTracker[tostring(targetId)] + damage
        else
            dmgTracker[tostring(targetId)] = damage
        end

  weapon_6:
    onMissed(targetId):
      lua: |
        if printCombatLog then 
            system.print(string.format('Missed %s',radar_1.getConstructName(targetId)))
        end
  weapon_6:
    onElementDestroyed(targetId,elementId):
      lua: |
        if printCombatLog then 
            local element = system.getItem(elementId)
            local name = element['displayName']
            system.print(string.format('Destroyed %s on %s',name,radar_1.getConstructName(targetId)))
        end
